{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","useEffect","setInterval","e","w","window","innerWidth","h","innerHeight","console","log","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSA0FeA,MA9Bf,WAAe,IAAD,EACqBC,mBAAS,IAD9B,mBAcZ,OAdY,UAGZC,qBAAU,WACIC,aAAY,SAACC,GACvB,IAAMC,EAAEC,OAAOC,WAAYC,EAAEF,OAAOG,YAChCJ,EAAE,KAAOG,EAAE,KACbE,QAAQC,IAAI,mBAEZD,QAAQC,IAAIP,KAEd,QAGG,cAAC,IAAMQ,SAAP,kBC9DMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9ca75f1e.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport KruskalsMaze from './appFiles/KruskalsMaze'\nimport DFSMaze from './appFiles/DFSMaze'\nimport PrimsMaze from './appFiles/PrimsMaze'\nimport EllersMaze from './appFiles/EllersMaze'\nimport ChupacabraMaze from './appFiles/ChupacabraMaze'\nimport CleanSlate from './appFiles/CleanSlate'\nimport mazeSolver from './appFiles/mazeSolver'\nimport AStarSolver from './appFiles/AStarSolver'\nimport Navbar from './appFiles/Navbar.js'\n\nconst SideMenu=(props)=>{\n  \n  const {difficulty,setMazeName}=props.options;\n\n  return <div id='sideMenu' className='hidden'>\n    <div className='sideMenuBtn' id='sidebarPrims' onClick={()=>{setMazeName('prims')}}>PRIMS</div>\n    <div className='sideMenuBtn' id='sidebarKruskals' onClick={()=>{setMazeName('kruskals')}}>KRUSKALS</div>\n    <div className='sideMenuBtn' id='sidebarDFS' onClick={()=>{setMazeName('DFS')}}>DFS</div>\n    <div className='sideMenuBtn' id='sidebarEllers' onClick={()=>{setMazeName('ellers')}}>ELLERS</div>\n    <div className='sideMenuBtn' id='sidebarChupacabra' onClick={()=>{setMazeName('chupacabra')}}>CHUPACABRA</div>\n    <div className='sideMenuBtn' id='sidebarCleanSlate' onClick={()=>{setMazeName('cleanSlate')}}>CLEAN SLATE</div>\n\n    <div className='sideMenuBtn' id='sidebarSetEntrance' onClick={()=>{mazeSolver.setEntrance(difficulty)}}>Set ENTRANCE</div>\n    <div className='sideMenuBtn' id='sidebarSetExit' onClick={()=>{mazeSolver.setExit(difficulty)}}>Set EXIT</div>\n    <div className='sideMenuBtn' id='sidebarSetObstacle' onClick={()=>{mazeSolver.setObstacle(difficulty)}}>Set OBSTACLE</div>\n\n\n    <div className='sideMenuBtn' id='solveDFS' onClick={()=>{mazeSolver.dfs(difficulty)}}>Solve DFS</div>\n    <div className='sideMenuBtn' id='solveBFS' onClick={()=>{mazeSolver.bfs(difficulty)}}>Solve BFS</div>\n    <div className='sideMenuBtn' id='solveAStar' onClick={()=>{AStarSolver.solve(difficulty)}}>Solve A*</div>\n\n  </div>\n\n};\nconst MazeSection=(props)=>{\n  const {difficulty,mazeName}=props.options;\n\n  switch (mazeName){\n    case 'DFS':\n      return <DFSMaze difficulty={difficulty} />\n    case 'kruskals':\n      return <KruskalsMaze difficulty={difficulty} />\n    case 'prims':\n      return <PrimsMaze difficulty={difficulty} />\n    case 'ellers':\n      return <EllersMaze difficulty={difficulty} />\n    case 'chupacabra':\n      return <ChupacabraMaze difficulty={difficulty} />\n    case 'cleanSlate':\n      return <CleanSlate difficulty={difficulty} />\n    default:\n      return <div id='hardMaze'></div>\n  }\n\n  \n}\n\nfunction App(){\n  const [windowSize,setWindowSize]=useState([]);\n\n  useEffect(()=>{\n    var intCode=setInterval((e)=>{\n      const w=window.innerWidth, h=window.innerHeight;\n      if (w<350 && h<1500){\n        console.log(\"PLEASE zOOM OUT\");\n      }else{\n        console.log(e);\n      }\n    },500)\n  })\n\n  return <React.Fragment>HI</React.Fragment>\n}\n\n// function App() {\n\n//   const [mazeName,setMazeName]=useState('');\n//   const [difficulty,setDifficulty]=useState('hard');\n  \n//   return <React.Fragment>\n//     <SideMenu options={{difficulty,setDifficulty,setMazeName}}/>\n//     <MazeSection options={{mazeName,difficulty}}/>\n//     <Navbar/>\n//   </React.Fragment>\n  \n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}