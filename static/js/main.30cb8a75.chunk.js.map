{"version":3,"sources":["appFiles/kruskalsGeneration.js","appFiles/KruskalsMaze.js","appFiles/mazeSolver.js","appFiles/mazeGeneration.js","appFiles/DFSMaze.js","appFiles/primsGeneration.js","appFiles/PrimsMaze.js","appFiles/ellersGeneration.js","appFiles/EllersMaze.js","appFiles/chupacabraGeneration.js","appFiles/ChupacabraMaze.js","appFiles/cleanSlateGeneration.js","appFiles/CleanSlate.js","appFiles/priorityQueue.js","appFiles/AStarSolver.js","appFiles/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["kruskalsGeneration","allSq","edgeSet","edgeArray","intervalCode","parents","clean","populateMaze","difficulty","numOfSquares","sqId","mazeId","i","sq","document","createElement","classList","add","setAttribute","getElementById","appendChild","push","getNbrKey","currKey","direction","gridSize","length","rowSize","setToArray","edgeString","u","v","isCommaFound","parseInt","edgePair","randomPos","Math","floor","random","innerEdge","getEdgeSet","Set","nbrDirections","nbrKey","toString","findParent","keysStack","componentParent","lastKey","pop","unionParents","parentA","parentB","mergeSquares","keyA","keyB","delta","remove","stackRandomMazeGenerator","timeInterval","setInterval","clearInterval","currEdge","parentU","parentV","createMaze","KruskalsMaze","props","useEffect","Fragment","id","mazeSolver","path","prevV","isVisited","nextBFSRound","currBFSRound","isMouseDown","mazeType","cleanInstVars","curr","getElementsByClassName","explored","pickEntrance","event","prevEntrance","target","removeEventListener","toggleHoverEntrance","toggle","pickExit","prevExit","toggleHoverExit","toggleHoverObstacle","contains","pickObstacle","release","setEntrance","addEventListener","setExit","setObstacle","up","down","right","left","extractPath","exitKey","getAttribute","unshift","backTrackPath","lastPos","isDiagonalSneak","horizontalNbrKey","verticalNbrKey","console","log","hzntlWall","verticalWall","dfs","entranceKey","cleanSlateSq","nbrPositions","currPos","bfs","concat","shift","mazeGeneration","firstKey","posStack","visitedCounter","pickStartingSq","num","currentMovement","nextKey","sort","recursiveRandomMazeGenerator","DFSMaze","primsGeneration","frontierSet","clearVars","frontierKey","visitedKey","shuffleLastFrontierElement","temp","currFrontierPos","needsToMerge","PrimsMaze","ellersGeneration","rowSet","rightNbrKey","downNbrKey","parentCurr","parentRight","magic8Ball","round","willMergeDown","has","parentDown","EllersMaze","chupacabraGeneration","stack","cols","rows","row","j","buildVerticalWall","TRRow","BRRow","TRCol","height","rowToSkip","buildHorizontalWall","BLCol","BRCol","BLRow","width","colToSkip","stackMazeGenerator","TLRow","TLCol","leftWidth","rightWidth","topHeight","btmHeight","ChupacabraMaze","cleanSlateGeneration","CleanSlate","priorityQueue","this","arr","index","parentIndex","parentNode","currNode","heapifyUp","arrLength","leftChild","rightChild","smallerChild","smallerIndex","heapifyDown","data","lastNode","AStarSolver","entranceCoord","exitCoord","nextPQ","getCoord","getEntranceExitCoord","emptySlateSq","getDistEntrance","idCoord","di","abs","dj","sqrt","getDistExit","getFCost","solve","diagonalMoves","nonDiagonalMoves","top","size","nbrPos","nbrF","Navbar","checked","selectedIndex","click","setBtn","unselectAllSetBtns","cleanPath","current","set","PQ","className","name","value","type","Button","style","fontSize","margin","onClick","variant","algo","exit","entrance","obstacles","hE","hEx","hObs","SideMenu","options","setMazeName","MazeSection","mazeName","App","useState","setDifficulty","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.30cb8a75.chunk.js","sourcesContent":["\r\n\r\nconst kruskalsGeneration={\r\n    allSq:[],\r\n    edgeSet:{},\r\n    edgeArray:[],\r\n    intervalCode:0,\r\n    parents:[],\r\n    clean(){\r\n        kruskalsGeneration.allSq=[];\r\n        kruskalsGeneration.edgeSet=[];\r\n        kruskalsGeneration.edgeArray=[];\r\n        kruskalsGeneration.intervalCode=0;\r\n        kruskalsGeneration.parents=[];\r\n    },\r\n    populateMaze(difficulty){\r\n\r\n        var numOfSquares=0;\r\n        var sqId=\"\";\r\n        var mazeId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                numOfSquares=64;\r\n                sqId=\"easySquare\";\r\n                mazeId=\"easyMaze\";\r\n                break;\r\n            case \"medium\":\r\n                numOfSquares=300;\r\n                sqId=\"mediumSquare\";\r\n                mazeId=\"mediumMaze\";\r\n                break;\r\n            case \"hard\":\r\n                numOfSquares=1344;\r\n                sqId=\"hardSquare\";\r\n                mazeId=\"hardMaze\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        for (var i=0;i<numOfSquares;i++){\r\n            const sq=document.createElement('div');\r\n            sq.classList.add(sqId);\r\n            sq.classList.add('top');\r\n            sq.classList.add('bottom');\r\n            sq.classList.add('left');\r\n            sq.classList.add('right');\r\n            sq.setAttribute('key',i);\r\n            document.getElementById(mazeId).appendChild(sq);  \r\n            kruskalsGeneration.allSq.push(sq);\r\n            kruskalsGeneration.parents.push(-1);\r\n        }\r\n    },\r\n    getNbrKey(currKey,direction){\r\n        const gridSize=kruskalsGeneration.allSq.length;\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }  \r\n\r\n        switch (direction){\r\n            case 'up':\r\n                return (currKey<rowSize)?-1:currKey-rowSize;\r\n            case 'down':\r\n                return ((gridSize-rowSize)<=currKey)?-1:currKey+rowSize;\r\n            case 'left':\r\n                return ((currKey%rowSize)===0)?-1:currKey-1;\r\n            case 'right':\r\n                return ((currKey+1)%rowSize===0)?-1:currKey+1;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    setToArray(){\r\n        for (let edgeString of kruskalsGeneration.edgeSet){\r\n            var u=0,v=0;\r\n            var isCommaFound=false;\r\n            //parses both u->v from string in set\r\n            for (var i=0;i<edgeString.length;i++){\r\n        \r\n                if (edgeString[i]===','){\r\n                    isCommaFound=true;\r\n                    continue;\r\n                }\r\n\r\n                if (!isCommaFound){\r\n                    u=u*10+parseInt(edgeString[i],10);\r\n                }else{\r\n                    v=v*10+parseInt(edgeString[i],10);\r\n                }\r\n            }\r\n\r\n            //creates array, inserts it at a random place in the edge array\r\n            const edgePair=[u,v];\r\n            kruskalsGeneration.edgeArray.push(edgePair);\r\n            const randomPos=Math.floor(Math.random()*kruskalsGeneration.edgeArray.length*.99);\r\n            const innerEdge=kruskalsGeneration.edgeArray[randomPos];\r\n            kruskalsGeneration.edgeArray[randomPos]=edgePair;\r\n            kruskalsGeneration.edgeArray[kruskalsGeneration.edgeArray.length-1]=innerEdge;\r\n        }\r\n    },\r\n    getEdgeSet(){\r\n        const gridSize=kruskalsGeneration.allSq.length;\r\n        kruskalsGeneration.edgeSet=new Set();\r\n        const nbrDirections=[\"up\",\"down\",\"right\",\"left\"];\r\n\r\n        //iterates through grid, finds all possible edges, stringifies them to store them into a set\r\n        for (var currKey=0;currKey<gridSize;currKey++){\r\n            for (var direction=0;direction<4;direction++){\r\n                const nbrKey=kruskalsGeneration.getNbrKey(currKey,nbrDirections[direction]);\r\n\r\n                if (nbrKey!==-1){\r\n                    const smaller=(currKey>nbrKey)?nbrKey:currKey;\r\n                    const larger=(currKey>nbrKey)?currKey:nbrKey;\r\n                    const edgePair=[smaller,larger];\r\n                    kruskalsGeneration.edgeSet.add(edgePair.toString());\r\n                }  \r\n            }\r\n        }\r\n    },\r\n    findParent(currKey){\r\n        \r\n        var keysStack=[];\r\n        while(kruskalsGeneration.parents[currKey]!==-1){\r\n            keysStack.push(currKey);\r\n            currKey=kruskalsGeneration.parents[currKey];\r\n        }\r\n        \r\n\r\n        const componentParent=currKey;\r\n        while(keysStack.length>0){\r\n            const lastKey=keysStack.pop();\r\n            kruskalsGeneration.parents[lastKey]=componentParent;\r\n        }\r\n\r\n        return componentParent;\r\n    },\r\n    unionParents(parentA,parentB){\r\n        kruskalsGeneration.parents[parentA]=parentB;\r\n    },\r\n    mergeSquares(keyA,keyB){\r\n\r\n        const delta=keyA-keyB;\r\n        if (delta===1){\r\n            kruskalsGeneration.allSq[keyA].classList.remove('left');\r\n            kruskalsGeneration.allSq[keyB].classList.remove('right');\r\n        }else if (delta===-1){\r\n            kruskalsGeneration.allSq[keyB].classList.remove('left');\r\n            kruskalsGeneration.allSq[keyA].classList.remove('right');\r\n        }else if (delta>1){\r\n            kruskalsGeneration.allSq[keyA].classList.remove('top');\r\n            kruskalsGeneration.allSq[keyB].classList.remove('bottom');\r\n        }else if (delta<-1){\r\n            kruskalsGeneration.allSq[keyA].classList.remove('bottom');\r\n            kruskalsGeneration.allSq[keyB].classList.remove('top');\r\n        }\r\n\r\n        \r\n        kruskalsGeneration.allSq[keyA].classList.add('visited');\r\n        kruskalsGeneration.allSq[keyB].classList.add('visited');\r\n    },\r\n    stackRandomMazeGenerator(){\r\n        const gridSize=kruskalsGeneration.allSq.length;\r\n        var timeInterval=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                timeInterval=40;\r\n                break;\r\n            case 300:\r\n                timeInterval=15;\r\n                break;\r\n            case 1344:\r\n                timeInterval=1;\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n\r\n        kruskalsGeneration.intervalCode=setInterval(()=>{\r\n            for (var i=0;i<7;i++){\r\n                if (kruskalsGeneration.edgeArray.length===0){\r\n                    clearInterval(kruskalsGeneration.intervalCode);\r\n                    return;\r\n                }\r\n\r\n                const currEdge=kruskalsGeneration.edgeArray.pop();\r\n                const u=currEdge[0], v=currEdge[1];\r\n                const parentU=kruskalsGeneration.findParent(u);\r\n                const parentV=kruskalsGeneration.findParent(v);\r\n\r\n                if (parentU!==parentV){\r\n                    kruskalsGeneration.unionParents(parentU,parentV);\r\n                    kruskalsGeneration.mergeSquares(u,v);\r\n                }\r\n            }\r\n        },timeInterval)\r\n    },\r\n\r\n    createMaze(difficulty){\r\n        kruskalsGeneration.clean();\r\n        kruskalsGeneration.populateMaze(difficulty);\r\n        kruskalsGeneration.getEdgeSet();\r\n        kruskalsGeneration.setToArray();\r\n        kruskalsGeneration.stackRandomMazeGenerator();\r\n    }\r\n}\r\n\r\nexport default kruskalsGeneration","import React, { useEffect } from 'react'\r\nimport kruskalsGeneration from './kruskalsGeneration'\r\nimport './Maze.css'\r\n\r\n\r\nconst KruskalsMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        kruskalsGeneration.createMaze(difficulty);\r\n        \r\n    },[])\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default KruskalsMaze","import mazeGeneration from \"./mazeGeneration\";\r\n\r\nconst mazeSolver={\r\n    intervalCode:0,\r\n    path:[],\r\n    prevV:[],\r\n    isVisited:[],\r\n    allSq:[],\r\n    nextBFSRound:[],\r\n    currBFSRound:[],\r\n    isMouseDown:false,\r\n    mazeType:'',\r\n\r\n    cleanInstVars(){\r\n        mazeSolver.intervalCode=0;\r\n        mazeSolver.path=[];\r\n        mazeSolver.prevV=[];\r\n        mazeSolver.isVisited=[];\r\n        mazeSolver.allSq=[];\r\n        mazeSolver.nextBFSRound=[];\r\n        mazeSolver.currBFSRound=[];\r\n        mazeSolver.isMouseDown=false;\r\n        mazeSolver.mazeType='';\r\n\r\n        var curr=document.getElementsByClassName('current');\r\n        while(curr.length>0){\r\n            curr[0].classList.remove('current');\r\n        }\r\n        var explored=document.getElementsByClassName('explored');\r\n        while(explored.length>0){\r\n            explored[0].classList.remove('explored');\r\n        }\r\n\r\n        mazeSolver.allSq=document.getElementsByClassName('hardSquare');\r\n    },\r\n    pickEntrance(event){\r\n        const prevEntrance=document.getElementsByClassName('entrance');\r\n        if (prevEntrance.length!==0){\r\n          prevEntrance[0].classList.remove('entrance');\r\n        }\r\n        event.target.classList.add('entrance');\r\n\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){    \r\n            mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n            mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n            mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickEntrance);\r\n        }\r\n\r\n        const setBtn=document.getElementsByClassName('setBtn');\r\n        setBtn[1].classList.remove('greenBtn');\r\n    },\r\n    toggleHoverEntrance(event){\r\n        event.target.classList.toggle('hoverEntrance');\r\n    },\r\n    pickExit(event){\r\n        const prevExit=document.getElementsByClassName('exit');\r\n        if (prevExit.length!==0){\r\n          prevExit[0].classList.remove('exit');\r\n        }\r\n        event.target.classList.add('exit');\r\n\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){      \r\n            mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n            mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n            mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickExit);\r\n        }\r\n\r\n        const setBtn=document.getElementsByClassName('setBtn');\r\n        setBtn[2].classList.remove('redBtn');\r\n    },\r\n    toggleHoverExit(event){\r\n        event.target.classList.toggle('hoverExit');\r\n    },\r\n    toggleHoverObstacle(event){\r\n\r\n        if (event.target.classList.contains('obstacle'))\r\n            return;\r\n            \r\n        if (!mazeSolver.isMouseDown)\r\n            event.target.classList.toggle('hoverObstacle');\r\n        if (mazeSolver.isMouseDown)\r\n            event.target.classList.add('obstacle');\r\n    },\r\n    pickObstacle(event){\r\n        mazeSolver.isMouseDown=true;\r\n        event.target.classList.add('obstacle');\r\n        event.target.classList.remove('hoverObstacle');\r\n    },\r\n    release(event){\r\n        mazeSolver.isMouseDown=false;\r\n    },\r\n    setEntrance(difficulty){\r\n        var sqId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                sqId=\"easySquare\";\r\n                break;\r\n            case \"medium\":\r\n                sqId=\"mediumSquare\";\r\n                break;\r\n            case \"hard\":\r\n                sqId=\"hardSquare\";\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n\r\n        mazeSolver.allSq=document.getElementsByClassName(sqId);\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickExit);\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].removeEventListener('mousedown',mazeSolver.pickObstacle);\r\n        mazeSolver.allSq[i].removeEventListener('mouseup',mazeSolver.release);\r\n\r\n        mazeSolver.allSq[i].addEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].addEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].addEventListener('click',mazeSolver.pickEntrance);\r\n        }\r\n    },\r\n    setExit(difficulty){\r\n        var sqId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                sqId=\"easySquare\";\r\n                break;\r\n            case \"medium\":\r\n                sqId=\"mediumSquare\";\r\n                break;\r\n            case \"hard\":\r\n                sqId=\"hardSquare\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    \r\n        mazeSolver.allSq=document.getElementsByClassName(sqId);\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n    \r\n          mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n          mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n          mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickEntrance);\r\n\r\n          mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverObstacle);\r\n          mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverObstacle);\r\n          mazeSolver.allSq[i].removeEventListener('mousedown',mazeSolver.pickObstacle);\r\n          mazeSolver.allSq[i].removeEventListener('mouseup',mazeSolver.release);\r\n    \r\n          mazeSolver.allSq[i].addEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n          mazeSolver.allSq[i].addEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n          mazeSolver.allSq[i].addEventListener('click',mazeSolver.pickExit);\r\n        }\r\n    },\r\n    setObstacle(difficulty){\r\n        var sqId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                sqId=\"easySquare\";\r\n                break;\r\n            case \"medium\":\r\n                sqId=\"mediumSquare\";\r\n                break;\r\n            case \"hard\":\r\n                sqId=\"hardSquare\";\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n\r\n        mazeSolver.allSq=document.getElementsByClassName(sqId);\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickExit);\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickEntrance);\r\n\r\n        mazeSolver.allSq[i].addEventListener('mouseenter',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].addEventListener('mouseout',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].addEventListener('mousedown',mazeSolver.pickObstacle);\r\n        mazeSolver.allSq[i].addEventListener('mouseup',mazeSolver.release);\r\n        }\r\n    },\r\n    getNbrKey(currKey, direction){\r\n        const gridSize=mazeSolver.allSq.length;\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        var up=0,down=0,right=0,left=0;\r\n        switch (direction){\r\n            case 'up':\r\n                return (mazeSolver.allSq[currKey].classList.contains('top'))?-1:currKey-rowSize;\r\n            case 'down':\r\n                return (mazeSolver.allSq[currKey].classList.contains('bottom'))?-1:currKey+rowSize;\r\n            case 'left':\r\n                return (mazeSolver.allSq[currKey].classList.contains('left'))?-1:currKey-1;\r\n            case 'right':\r\n                return (mazeSolver.allSq[currKey].classList.contains('right'))?-1:currKey+1;\r\n            case 'upLeft':\r\n                up=mazeSolver.getNbrKey(currKey,'up');\r\n                left=mazeSolver.getNbrKey(currKey,'left');\r\n                return (up===-1 || left===-1)?-1:currKey-rowSize-1;\r\n            case 'upRight':\r\n                up=mazeSolver.getNbrKey(currKey,'up');\r\n                right=mazeSolver.getNbrKey(currKey,'right');\r\n                return (up===-1 || right===-1)?-1:currKey-rowSize+1;\r\n            case 'downLeft':\r\n                down=mazeSolver.getNbrKey(currKey,'down');\r\n                left=mazeSolver.getNbrKey(currKey,'left');\r\n                return (down===-1 || left===-1)?-1:currKey+rowSize-1;\r\n            case 'downRight':\r\n                down=mazeSolver.getNbrKey(currKey,'down');\r\n                right=mazeSolver.getNbrKey(currKey,'right');\r\n                return (down===-1 || right===-1)?-1:currKey+rowSize+1;\r\n            default:\r\n                return -1;\r\n        }\r\n    },\r\n    extractPath(){\r\n        var exitKey=document.getElementsByClassName('exit')[0].getAttribute('key');\r\n        while(mazeSolver.prevV[exitKey]!==-1){\r\n            mazeSolver.path.unshift(exitKey);\r\n            exitKey=mazeSolver.prevV[exitKey];\r\n        }\r\n        mazeSolver.path.unshift(exitKey);\r\n    },\r\n    backTrackPath(){\r\n\r\n        var timeInterval=0;\r\n        const gridSize=mazeSolver.allSq.length;\r\n        switch(gridSize){\r\n            case 64:\r\n                timeInterval=50;\r\n                break;\r\n            case 300:\r\n                timeInterval=25;\r\n                break;\r\n            case 1344:\r\n                timeInterval=5;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        mazeSolver.intervalCode=setInterval(()=>{\r\n\r\n            if(mazeSolver.path.length===0){\r\n                clearInterval(mazeSolver.intervalCode);\r\n                return;\r\n            }\r\n            \r\n            const lastPos=parseInt(mazeSolver.path.pop(),10);\r\n            mazeSolver.allSq[lastPos].classList.add('current');\r\n        },timeInterval);\r\n    },\r\n    isDiagonalSneak(currKey,direction){\r\n        var horizontalNbrKey=0,verticalNbrKey=0;\r\n        switch(direction){\r\n            case 'upRight':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'upLeft':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'downRight':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            case 'downLeft':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (horizontalNbrKey==-1 || verticalNbrKey==-1){\r\n            console.log(\"NEGS\");\r\n        }\r\n\r\n        const hzntlWall=mazeSolver.allSq[horizontalNbrKey].classList.contains('obstacle');\r\n        const verticalWall=mazeSolver.allSq[verticalNbrKey].classList.contains('obstacle');\r\n        return (hzntlWall && verticalWall);\r\n        \r\n    },\r\n    dfs(difficulty){\r\n        mazeSolver.cleanInstVars();\r\n        var timeInterval=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                timeInterval=40;\r\n                break;\r\n            case \"medium\":\r\n                timeInterval=15;\r\n                break;\r\n            case \"hard\":\r\n                timeInterval=1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        //initialize allSq, isVisited, path, mazeType\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n            mazeSolver.isVisited.push(false);\r\n            mazeSolver.prevV.push(-1);\r\n        }\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        mazeSolver.isVisited[entranceKey]=true;\r\n        mazeSolver.path.push(entranceKey);\r\n        const cleanSlateSq=document.getElementsByClassName('cleanSlateSq');\r\n        mazeSolver.mazeType=(cleanSlateSq.length===0)?'maze':'cleanSlate';\r\n\r\n        //actual dfs logic starts here\r\n        const diagonalMoves=[\"right\",\"left\",\"up\",\"down\",\"upRight\",\"upLeft\",\"downRight\",\"downLeft\"];\r\n        const nonDiagonalMoves=[\"right\",\"left\",\"up\",\"down\"];\r\n        const nbrPositions=(mazeSolver.mazeType===\"cleanSlate\")?diagonalMoves:nonDiagonalMoves;\r\n\r\n        mazeSolver.intervalCode=setInterval(()=>{\r\n\r\n            //no path to exit exists\r\n            if (mazeSolver.path.length===0){\r\n                clearInterval(mazeSolver.intervalCode);\r\n                return;\r\n            }\r\n\r\n            //get last element in path\r\n            const currPos=parseInt(mazeSolver.path[mazeSolver.path.length-1],10);\r\n\r\n            //if last element is exit, commence exit backtrack\r\n            if (mazeSolver.allSq[currPos].classList.contains('exit')){\r\n                clearInterval(mazeSolver.intervalCode);\r\n                mazeSolver.backTrackPath();\r\n                return;\r\n            }\r\n\r\n            //if last element not exit, mark current as explored, look at nbrs\r\n            mazeSolver.allSq[currPos].classList.remove('current');\r\n            mazeSolver.allSq[currPos].classList.add('explored');\r\n            for (var i=0;i<nbrPositions.length;i++){\r\n                const nbrKey=mazeSolver.getNbrKey(currPos,nbrPositions[i]);\r\n                if (nbrKey!==-1 && !mazeSolver.isVisited[nbrKey] && !mazeSolver.allSq[nbrKey].classList.contains('obstacle')){\r\n\r\n                    if (i>3 && mazeSolver.isDiagonalSneak(currPos,nbrPositions[i]))\r\n                        continue;\r\n\r\n                    mazeSolver.isVisited[nbrKey]=true;\r\n                    mazeSolver.path.push(nbrKey);\r\n                    mazeSolver.prevV[nbrKey]=currPos;\r\n                    return;\r\n                }\r\n            }\r\n            mazeSolver.path.pop();\r\n            \r\n        },timeInterval)\r\n    },\r\n    bfs(difficulty){\r\n        mazeSolver.cleanInstVars();\r\n        var timeInterval=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                timeInterval=40;\r\n                break;\r\n            case \"medium\":\r\n                timeInterval=15;\r\n                break;\r\n            case \"hard\":\r\n                timeInterval=100;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        //initialize isVisited, path, and move types\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n            mazeSolver.isVisited.push(false);\r\n            mazeSolver.prevV.push(-1);\r\n        }\r\n        const cleanSlateSq=document.getElementsByClassName('cleanSlateSq');\r\n        mazeSolver.mazeType=(cleanSlateSq.length===0)?'maze':'cleanSlate';\r\n        const diagonalMoves=[\"right\",\"left\",\"up\",\"down\",\"upRight\",\"upLeft\",\"downRight\",\"downLeft\"];\r\n        const nonDiagonalMoves=[\"right\",\"left\",\"up\",\"down\"];\r\n        const nbrPositions=(mazeSolver.mazeType===\"cleanSlate\")?diagonalMoves:nonDiagonalMoves;\r\n\r\n        //actual bfs logic starts here\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        mazeSolver.isVisited[entranceKey]=true;\r\n        mazeSolver.nextBFSRound.push(entranceKey);\r\n\r\n        mazeSolver.intervalCode=setInterval(()=>{\r\n\r\n            //no path to exit exists\r\n            if (mazeSolver.nextBFSRound.length===0){\r\n                clearInterval(mazeSolver.intervalCode);\r\n                return;\r\n            }\r\n\r\n            mazeSolver.currBFSRound=mazeSolver.nextBFSRound.concat();\r\n            mazeSolver.nextBFSRound=[];\r\n            while(mazeSolver.currBFSRound.length>0){\r\n           \r\n                const currKey=parseInt(mazeSolver.currBFSRound.shift(),10);\r\n\r\n                if (mazeSolver.allSq[currKey].classList.contains('exit')){\r\n                    clearInterval(mazeSolver.intervalCode);\r\n                    mazeSolver.extractPath();\r\n                    mazeSolver.backTrackPath();\r\n                }\r\n                for (var i=0;i<nbrPositions.length;i++){\r\n                    const nbrKey=mazeSolver.getNbrKey(currKey,nbrPositions[i]);\r\n                    if (nbrKey!==-1 && !mazeSolver.isVisited[nbrKey] && !mazeSolver.allSq[nbrKey].classList.contains('obstacle')){\r\n\r\n                        if (i>3 && mazeSolver.isDiagonalSneak(currKey,nbrPositions[i]))\r\n                            continue;\r\n\r\n                        mazeSolver.isVisited[nbrKey]=true;\r\n                        mazeSolver.prevV[nbrKey]=currKey;\r\n                        mazeSolver.allSq[nbrKey].classList.add('explored');\r\n                        mazeSolver.nextBFSRound.push(nbrKey);\r\n                    }\r\n                }\r\n            }\r\n        },timeInterval)\r\n    }\r\n}\r\n\r\nexport default mazeSolver","import mazeSolver from \"./mazeSolver\";\r\n\r\nconst mazeGeneration={\r\n    allSq:[],\r\n    isVisited:[],\r\n    firstKey:0,\r\n    exitKey:0,\r\n    posStack:[],\r\n    visitedCounter:0,\r\n    intervalCode:0,\r\n\r\n    clean(){\r\n        mazeGeneration.allSq=[];\r\n        mazeGeneration.isVisited=[];\r\n        mazeGeneration.firstKey=0;\r\n        mazeGeneration.exitKey=0;\r\n        mazeGeneration.posStack=[];\r\n        mazeGeneration.visitedCounter=0;\r\n        mazeGeneration.intervalCode=0;\r\n    },\r\n    populateMaze(difficulty){\r\n\r\n        var numOfSquares=0;\r\n        var sqId=\"\";\r\n        var mazeId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                numOfSquares=64;\r\n                sqId=\"easySquare\";\r\n                mazeId=\"easyMaze\";\r\n                break;\r\n            case \"medium\":\r\n                numOfSquares=300;\r\n                sqId=\"mediumSquare\";\r\n                mazeId=\"mediumMaze\";\r\n                break;\r\n            case \"hard\":\r\n                numOfSquares=1344;\r\n                sqId=\"hardSquare\";\r\n                mazeId=\"hardMaze\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        for (var i=0;i<numOfSquares;i++){\r\n            const sq=document.createElement('div');\r\n            sq.classList.add(sqId);\r\n            sq.classList.add('top');\r\n            sq.classList.add('bottom');\r\n            sq.classList.add('left');\r\n            sq.classList.add('right');\r\n            sq.setAttribute('key',i);\r\n            document.getElementById(mazeId).appendChild(sq);  \r\n            mazeGeneration.allSq.push(sq);\r\n            mazeGeneration.isVisited.push(false);\r\n        }\r\n        \r\n        \r\n        \r\n    },\r\n    pickStartingSq(difficulty){\r\n        var num=0;\r\n\r\n        if (difficulty==='easy'){\r\n            num=Math.floor(Math.random()*7.99);\r\n        }\r\n        if (difficulty==='medium'){\r\n            num=Math.floor(Math.random()*19.99);\r\n        }\r\n        if (difficulty==='hard'){\r\n            num=Math.floor(Math.random()*55.99);\r\n        }\r\n        mazeGeneration.firstKey=num;\r\n        mazeGeneration.isVisited[num]=true;\r\n        mazeGeneration.allSq[num].classList.add('current');\r\n        // mazeGeneration.allSq[num].classList.add('entrance');\r\n\r\n        mazeGeneration.posStack.push(num);\r\n        mazeGeneration.visitedCounter++;\r\n    },\r\n    currentMovement(currKey,direction){\r\n        var nextKey=0;\r\n        var rowSize=0;\r\n        switch(mazeGeneration.allSq.length){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        switch(direction){\r\n            case 'up':\r\n                nextKey=currKey-rowSize;\r\n                mazeGeneration.allSq[currKey].classList.remove('top');\r\n                mazeGeneration.allSq[nextKey].classList.remove('bottom');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n\r\n                break;\r\n            case 'down':\r\n                nextKey=currKey+rowSize;\r\n                mazeGeneration.allSq[currKey].classList.remove('bottom');\r\n                mazeGeneration.allSq[nextKey].classList.remove('top');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n                break;\r\n            case 'left':\r\n                nextKey=currKey-1;\r\n                mazeGeneration.allSq[currKey].classList.remove('left');\r\n                mazeGeneration.allSq[nextKey].classList.remove('right');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n                break;\r\n            case 'right':\r\n                nextKey=currKey+1;\r\n                mazeGeneration.allSq[currKey].classList.remove('right');\r\n                mazeGeneration.allSq[nextKey].classList.remove('left');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    getNbrKey(currKey,direction){\r\n        const gridSize=mazeGeneration.isVisited.length;\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }  \r\n\r\n        switch (direction){\r\n            case 'up':\r\n                return (currKey<rowSize)?-1:currKey-rowSize;\r\n            case 'down':\r\n                return ((gridSize-rowSize)<=currKey)?-1:currKey+rowSize;\r\n            case 'left':\r\n                return ((currKey%rowSize)===0)?-1:currKey-1;\r\n            case 'right':\r\n                return ((currKey+1)%rowSize===0)?-1:currKey+1;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    //generates the maze walls using a timeInterval\r\n    stackRandomMazeGenerator(difficulty){\r\n\r\n        var timeInterval=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                timeInterval=40;\r\n                break;\r\n            case \"medium\":\r\n                timeInterval=15;\r\n                break;\r\n            case \"hard\":\r\n                timeInterval=1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var nbrPositions=[\"up\",\"down\",\"left\",\"right\"];\r\n\r\n        mazeGeneration.intervalCode=setInterval(()=>{\r\n            if (mazeGeneration.visitedCounter===mazeGeneration.isVisited.length){\r\n                clearInterval(mazeGeneration.intervalCode);\r\n                document.getElementsByClassName('current')[0].classList.add('visited');\r\n                document.getElementsByClassName('current')[0].classList.remove('current');\r\n                return;\r\n            }\r\n\r\n            document.getElementsByClassName('current')[0].classList.add('visited');\r\n            document.getElementsByClassName('current')[0].classList.remove('current');\r\n            const currPos=mazeGeneration.posStack[mazeGeneration.posStack.length-1];\r\n            mazeGeneration.allSq[currPos].classList.add('current');          \r\n\r\n            nbrPositions.sort(()=>Math.random()-.5);\r\n\r\n            for (var i=0;i<4;i++){\r\n                const nbrKey=mazeGeneration.getNbrKey(currPos,nbrPositions[i]);\r\n                if (nbrKey!==-1 && !mazeGeneration.isVisited[nbrKey]){\r\n                    mazeGeneration.currentMovement(currPos,nbrPositions[i]);\r\n                    mazeGeneration.isVisited[nbrKey]=true;\r\n                    mazeGeneration.posStack.push(nbrKey);\r\n                    mazeGeneration.visitedCounter++;\r\n                    return;\r\n                }\r\n            }\r\n            mazeGeneration.posStack.pop();\r\n        },timeInterval)\r\n    },\r\n    //this function isn't really used but I keep it cause its cool\r\n    recursiveRandomMazeGenerator(currKey){\r\n\r\n        //shuffle all poss nbrs\r\n        var nbrPositions=[\"up\",\"down\",\"left\",\"right\"];\r\n        nbrPositions.sort(()=>Math.random()-.5);\r\n\r\n        //recurse into each nbr\r\n        for (var i=0;i<4;i++){\r\n\r\n            const direction=nbrPositions[i];\r\n            const nbrKey=mazeGeneration.getNbrKey(currKey,direction);\r\n\r\n            if (nbrKey!==-1 && !mazeGeneration.isVisited[nbrKey]){\r\n                mazeGeneration.isVisited[nbrKey]=true;\r\n                mazeGeneration.currentMovement(currKey,direction);\r\n                mazeGeneration.recursiveRandomMazeGenerator(nbrKey);\r\n            }\r\n        }\r\n    },\r\n    //easily called function that calls all steps required to generate the maze\r\n    createMaze(difficulty){\r\n        mazeGeneration.clean();\r\n        mazeGeneration.populateMaze(difficulty);\r\n        mazeGeneration.pickStartingSq(difficulty);\r\n        mazeGeneration.stackRandomMazeGenerator(difficulty);\r\n    }\r\n}\r\n\r\nexport default mazeGeneration","import React, { useEffect } from 'react'\r\nimport mazeGeneration from './mazeGeneration'\r\nimport './Maze.css'\r\n\r\nconst DFSMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        mazeGeneration.createMaze(difficulty);\r\n        \r\n    })\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default DFSMaze","const primsGeneration={\r\n    allSq:[],\r\n    intervalCode:0,\r\n    frontierSet:[],\r\n\r\n    clearVars(){\r\n        primsGeneration.allSq=[];\r\n        primsGeneration.intervalCode=0;\r\n        primsGeneration.frontierSet=[];\r\n    },\r\n    populateMaze(difficulty){\r\n\r\n        var numOfSquares=0;\r\n        var sqId=\"\";\r\n        var mazeId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                numOfSquares=64;\r\n                sqId=\"easySquare\";\r\n                mazeId=\"easyMaze\";\r\n                break;\r\n            case \"medium\":\r\n                numOfSquares=300;\r\n                sqId=\"mediumSquare\";\r\n                mazeId=\"mediumMaze\";\r\n                break;\r\n            case \"hard\":\r\n                numOfSquares=1344;\r\n                sqId=\"hardSquare\";\r\n                mazeId=\"hardMaze\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        for (var i=0;i<numOfSquares;i++){\r\n            const sq=document.createElement('div');\r\n            sq.classList.add(sqId);\r\n            sq.classList.add('top');\r\n            sq.classList.add('bottom');\r\n            sq.classList.add('left');\r\n            sq.classList.add('right');\r\n            sq.setAttribute('key',i);\r\n            document.getElementById(mazeId).appendChild(sq);  \r\n            primsGeneration.allSq.push(sq);\r\n        }   \r\n    },\r\n    pickStartingSq(difficulty){\r\n        var num=0;\r\n\r\n        if (difficulty==='easy'){\r\n            num=Math.floor(Math.random()*7.99);\r\n        }\r\n        if (difficulty==='medium'){\r\n            num=Math.floor(Math.random()*19.99);\r\n        }\r\n        if (difficulty==='hard'){\r\n            num=Math.floor(Math.random()*55.99);\r\n        }\r\n        primsGeneration.allSq[num].classList.add('visited');\r\n        primsGeneration.allSq[num].classList.add('current');\r\n\r\n        const nbrDirections=['up','down','left','right']\r\n        for (var i=0;i<4;i++){\r\n            const nbrKey=primsGeneration.getNbrKey(num,nbrDirections[i]);\r\n            if (nbrKey!==-1){\r\n                primsGeneration.allSq[nbrKey].classList.add('frontier');\r\n                primsGeneration.frontierSet.push(nbrKey);\r\n            }\r\n        }\r\n    },\r\n    getNbrKey(currKey,direction){\r\n        const gridSize=primsGeneration.allSq.length;\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }  \r\n\r\n        switch (direction){\r\n            case 'up':\r\n                return (currKey<rowSize)?-1:currKey-rowSize;\r\n            case 'down':\r\n                return ((gridSize-rowSize)<=currKey)?-1:currKey+rowSize;\r\n            case 'left':\r\n                return ((currKey%rowSize)===0)?-1:currKey-1;\r\n            case 'right':\r\n                return ((currKey+1)%rowSize===0)?-1:currKey+1;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    mergeSquares(frontierKey,visitedKey){\r\n\r\n        const delta=frontierKey-visitedKey;\r\n        if (delta===1){\r\n            primsGeneration.allSq[frontierKey].classList.remove('left');\r\n            primsGeneration.allSq[visitedKey].classList.remove('right');\r\n        }else if (delta===-1){\r\n            primsGeneration.allSq[visitedKey].classList.remove('left');\r\n            primsGeneration.allSq[frontierKey].classList.remove('right');\r\n        }else if (delta>1){\r\n            primsGeneration.allSq[frontierKey].classList.remove('top');\r\n            primsGeneration.allSq[visitedKey].classList.remove('bottom');\r\n        }else if (delta<-1){\r\n            primsGeneration.allSq[frontierKey].classList.remove('bottom');\r\n            primsGeneration.allSq[visitedKey].classList.remove('top');\r\n        }\r\n        primsGeneration.allSq[frontierKey].classList.remove('frontier');\r\n        primsGeneration.allSq[visitedKey].classList.remove('visitedKey');\r\n    },\r\n    shuffleLastFrontierElement(){\r\n        const num=Math.floor(Math.random()*primsGeneration.frontierSet.length*.99);\r\n        const temp=primsGeneration.frontierSet[num];\r\n        primsGeneration.frontierSet[num]=primsGeneration.frontierSet[primsGeneration.frontierSet.length-1];\r\n        primsGeneration.frontierSet[primsGeneration.frontierSet.length-1]=temp;\r\n    },\r\n    stackRandomMazeGenerator(difficulty){\r\n\r\n        var timeInterval=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                timeInterval=40;\r\n                break;\r\n            case \"medium\":\r\n                timeInterval=15;\r\n                break;\r\n            case \"hard\":\r\n                timeInterval=1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var nbrPositions=[\"up\",\"down\",\"left\",\"right\"];\r\n\r\n        primsGeneration.intervalCode=setInterval(()=>{\r\n\r\n            document.getElementsByClassName('current')[0].classList.remove('current');\r\n            if (primsGeneration.frontierSet.length===0){\r\n                clearInterval(primsGeneration.intervalCode);\r\n                return;\r\n            }\r\n\r\n            primsGeneration.shuffleLastFrontierElement();\r\n            const currFrontierPos=primsGeneration.frontierSet.pop();\r\n            primsGeneration.allSq[currFrontierPos].classList.add('current');           \r\n\r\n            nbrPositions.sort(()=>Math.random()-.5);\r\n            var needsToMerge=true;\r\n            for (var i=0;i<4;i++){\r\n                const nbrKey=primsGeneration.getNbrKey(currFrontierPos,nbrPositions[i]);\r\n                if (nbrKey===-1)\r\n                    continue;\r\n\r\n                if (needsToMerge && primsGeneration.allSq[nbrKey].classList.contains('visited')){\r\n                    primsGeneration.mergeSquares(currFrontierPos,nbrKey);\r\n                    primsGeneration.allSq[currFrontierPos].classList.add('visited');\r\n                    needsToMerge=false;\r\n                }\r\n                if (!primsGeneration.allSq[nbrKey].classList.contains('visited') && !primsGeneration.allSq[nbrKey].classList.contains('frontier')){\r\n                    primsGeneration.allSq[nbrKey].classList.add('frontier');\r\n                    primsGeneration.frontierSet.push(nbrKey);\r\n                }\r\n            }\r\n        },timeInterval)\r\n    },\r\n    createMaze(difficulty){\r\n        primsGeneration.clearVars();\r\n        primsGeneration.populateMaze(difficulty);\r\n        primsGeneration.pickStartingSq(difficulty);\r\n        primsGeneration.stackRandomMazeGenerator(difficulty);\r\n    }\r\n}\r\n\r\nexport default primsGeneration","import React, { useEffect } from 'react'\r\nimport primsGeneration from './primsGeneration'\r\n\r\nconst PrimsMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        primsGeneration.createMaze(difficulty);\r\n        \r\n    },[])\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default PrimsMaze\r\n\r\n\r\n","const ellersGeneration={\r\n    allSq:[],\r\n    intervalCode:0,\r\n    currKey:0,\r\n    rowSet:{},\r\n    parents:[],\r\n\r\n    clean(){\r\n        ellersGeneration.allSq=[];\r\n        ellersGeneration.intervalCode=0;\r\n        ellersGeneration.currKey=0;\r\n        ellersGeneration.rowSet={};\r\n        ellersGeneration.parents=[];\r\n    },\r\n    populateMaze(difficulty){\r\n\r\n        var numOfSquares=0;\r\n        var sqId=\"\";\r\n        var mazeId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                numOfSquares=64;\r\n                sqId=\"easySquare\";\r\n                mazeId=\"easyMaze\";\r\n                break;\r\n            case \"medium\":\r\n                numOfSquares=300;\r\n                sqId=\"mediumSquare\";\r\n                mazeId=\"mediumMaze\";\r\n                break;\r\n            case \"hard\":\r\n                numOfSquares=1344;\r\n                sqId=\"hardSquare\";\r\n                mazeId=\"hardMaze\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        for (var i=0;i<numOfSquares;i++){\r\n            const sq=document.createElement('div');\r\n            sq.classList.add(sqId);\r\n            sq.classList.add('top');\r\n            sq.classList.add('bottom');\r\n            sq.classList.add('left');\r\n            sq.classList.add('right');\r\n            sq.setAttribute('key',i);\r\n            document.getElementById(mazeId).appendChild(sq);  \r\n            ellersGeneration.allSq.push(sq);\r\n            ellersGeneration.parents.push(-1);\r\n        }\r\n    },\r\n    getNbrKey(currKey,direction){\r\n        const gridSize=ellersGeneration.allSq.length;\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }  \r\n\r\n        switch (direction){\r\n            case 'up':\r\n                return (currKey<rowSize)?-1:currKey-rowSize;\r\n            case 'down':\r\n                return ((gridSize-rowSize)<=currKey)?-1:currKey+rowSize;\r\n            case 'left':\r\n                return ((currKey%rowSize)===0)?-1:currKey-1;\r\n            case 'right':\r\n                return ((currKey+1)%rowSize===0)?-1:currKey+1;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    findParent(currKey){\r\n        \r\n        var keysStack=[];\r\n        while(ellersGeneration.parents[currKey]!==-1){\r\n            keysStack.push(currKey);\r\n            currKey=ellersGeneration.parents[currKey];\r\n        }\r\n        \r\n\r\n        const componentParent=currKey;\r\n        while(keysStack.length>0){\r\n            const lastKey=keysStack.pop();\r\n            ellersGeneration.parents[lastKey]=componentParent;\r\n        }\r\n\r\n        return componentParent;\r\n    },\r\n    unionParents(parentA,parentB){\r\n        ellersGeneration.parents[parentA]=parentB;\r\n    },\r\n    mergeSquares(keyA,keyB){\r\n\r\n        const delta=keyA-keyB;\r\n        if (delta===1){\r\n            ellersGeneration.allSq[keyA].classList.remove('left');\r\n            ellersGeneration.allSq[keyB].classList.remove('right');\r\n        }else if (delta===-1){\r\n            ellersGeneration.allSq[keyB].classList.remove('left');\r\n            ellersGeneration.allSq[keyA].classList.remove('right');\r\n        }else if (delta>1){\r\n            ellersGeneration.allSq[keyA].classList.remove('top');\r\n            ellersGeneration.allSq[keyB].classList.remove('bottom');\r\n        }else if (delta<-1){\r\n            ellersGeneration.allSq[keyA].classList.remove('bottom');\r\n            ellersGeneration.allSq[keyB].classList.remove('top');\r\n        }\r\n\r\n        \r\n        ellersGeneration.allSq[keyA].classList.add('visited');\r\n        ellersGeneration.allSq[keyB].classList.add('visited');\r\n    },\r\n    stackRandomMazeGenerator(){\r\n        const gridSize=ellersGeneration.allSq.length;\r\n        var timeInterval=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                timeInterval=40;\r\n                break;\r\n            case 300:\r\n                timeInterval=15;\r\n                break;\r\n            case 1344:\r\n                timeInterval=1;\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n\r\n        ellersGeneration.rowSet=new Set();\r\n        ellersGeneration.intervalCode=setInterval(()=>{\r\n\r\n            for (var i=0;i<4;i++){\r\n\r\n            if (ellersGeneration.currKey!==0){\r\n                document.getElementsByClassName('current')[0].classList.remove('current');\r\n            }\r\n\r\n            if (ellersGeneration.currKey===ellersGeneration.allSq.length){\r\n                clearInterval(ellersGeneration.intervalCode);\r\n                return;\r\n            }\r\n            \r\n            ellersGeneration.allSq[ellersGeneration.currKey].classList.add('current');\r\n            ellersGeneration.allSq[ellersGeneration.currKey].classList.remove('frontier');\r\n            const rightNbrKey=ellersGeneration.getNbrKey(ellersGeneration.currKey,'right');\r\n            const downNbrKey=ellersGeneration.getNbrKey(ellersGeneration.currKey,'down');\r\n\r\n            //merge all components belonging to different parents in bottom row (corner case)\r\n            if (downNbrKey===-1){\r\n                const rightNbrKey=ellersGeneration.getNbrKey(ellersGeneration.currKey,'right');\r\n                if (rightNbrKey!==-1){\r\n                    const parentCurr=ellersGeneration.findParent(ellersGeneration.currKey);\r\n                    const parentRight=ellersGeneration.findParent(rightNbrKey);\r\n                    if (parentCurr!==parentRight){\r\n                        ellersGeneration.unionParents(parentCurr,parentRight);\r\n                        ellersGeneration.mergeSquares(ellersGeneration.currKey,rightNbrKey);\r\n                    }\r\n                }\r\n                ellersGeneration.currKey++;\r\n                return;\r\n            }\r\n\r\n            //random right merge if NOT on bottom row\r\n            if (rightNbrKey!==-1){\r\n                const parentCurr=ellersGeneration.findParent(ellersGeneration.currKey);\r\n                const parentRight=ellersGeneration.findParent(rightNbrKey);\r\n                const magic8Ball=Math.round(Math.random());\r\n                if (parentCurr!==parentRight && magic8Ball){\r\n                    ellersGeneration.unionParents(parentCurr,parentRight);\r\n                    ellersGeneration.mergeSquares(ellersGeneration.currKey,rightNbrKey);\r\n                }\r\n            }\r\n\r\n            //guaranteed plus random down merge\r\n            var willMergeDown=false;\r\n            if (downNbrKey!==-1){\r\n                const parentCurr=ellersGeneration.findParent(ellersGeneration.currKey);\r\n                if (!ellersGeneration.rowSet.has(parentCurr)){\r\n                    willMergeDown=true;\r\n                    ellersGeneration.rowSet.add(parentCurr);\r\n                }else{\r\n                    const magic8Ball=Math.round(Math.random());\r\n                    willMergeDown=magic8Ball;\r\n                }\r\n            }\r\n            if (willMergeDown){\r\n                const parentCurr=ellersGeneration.findParent(ellersGeneration.currKey);\r\n                const parentDown=ellersGeneration.findParent(downNbrKey);\r\n                ellersGeneration.unionParents(parentDown,parentCurr);\r\n                ellersGeneration.mergeSquares(ellersGeneration.currKey,downNbrKey);\r\n\r\n                ellersGeneration.allSq[downNbrKey].classList.add('frontier');\r\n            }\r\n            \r\n            //emptying set if on last sq on row\r\n            if (rightNbrKey===-1){\r\n                ellersGeneration.rowSet=new Set();\r\n            }\r\n\r\n            //moving currKey to next square\r\n            ellersGeneration.currKey++;\r\n        }\r\n            \r\n        },timeInterval)\r\n    },\r\n    createMaze(difficulty){\r\n        ellersGeneration.clean();\r\n        ellersGeneration.populateMaze(difficulty);\r\n        ellersGeneration.stackRandomMazeGenerator(difficulty);\r\n    }\r\n}\r\n\r\nexport default ellersGeneration","import React, { useEffect,useState } from 'react'\r\nimport ellersGeneration from './ellersGeneration'\r\nimport './Maze.css'\r\n\r\n\r\nconst EllersMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        ellersGeneration.createMaze(difficulty);\r\n        \r\n    },[])\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default EllersMaze","\r\n\r\nconst chupacabraGeneration={\r\n    allSq:[],\r\n    intervalCode:0,\r\n    stack:[],\r\n    cols:0,\r\n    rows:0,\r\n\r\n    clean(){\r\n        chupacabraGeneration.allSq=[];\r\n        chupacabraGeneration.intervalCode=0;\r\n        chupacabraGeneration.stack=[];\r\n        chupacabraGeneration.cols=0;\r\n        chupacabraGeneration.rows=0;\r\n    },\r\n    populateMaze(difficulty){\r\n        var numOfSquares=0;\r\n        var sqId=\"\";\r\n        var mazeId=\"\";\r\n        var cols=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                numOfSquares=64;\r\n                sqId=\"easySquare\";\r\n                mazeId=\"easyMaze\";\r\n                cols=8;\r\n                break;\r\n            case \"medium\":\r\n                numOfSquares=300;\r\n                sqId=\"mediumSquare\";\r\n                mazeId=\"mediumMaze\";\r\n                cols=20;\r\n                break;\r\n            case \"hard\":\r\n                numOfSquares=1344;\r\n                sqId=\"hardSquare\";\r\n                mazeId=\"hardMaze\";\r\n                cols=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rows=numOfSquares/cols;\r\n        chupacabraGeneration.rows=rows;\r\n        chupacabraGeneration.cols=cols;\r\n        var id=0;\r\n        for (var i=0;i<rows;i++){\r\n            var row=[];\r\n            for (var j=0;j<cols;j++){\r\n                const sq=document.createElement('div');\r\n                sq.classList.add(sqId);\r\n                sq.classList.add('visited');\r\n                if (i===0){\r\n                    sq.classList.add('top');\r\n                }\r\n                if (i===rows-1){\r\n                    sq.classList.add('bottom');\r\n                }\r\n                if (j===0){\r\n                    sq.classList.add('left');\r\n                }\r\n                if (j===cols-1){\r\n                    sq.classList.add('right');\r\n                }\r\n                sq.setAttribute('key',id);\r\n                id++;\r\n                document.getElementById(mazeId).appendChild(sq);  \r\n                row.push(sq);\r\n            }\r\n            chupacabraGeneration.allSq.push(row);\r\n        }\r\n    },\r\n    buildVerticalWall(TRRow,BRRow, TRCol){\r\n\r\n        //pick a random row in TRRow<=range<=BRRow to skip\r\n        const height=BRRow-TRRow+1;\r\n        const rowToSkip=Math.floor(Math.random()*(height-1))+TRRow;\r\n\r\n        while(TRRow<=BRRow){\r\n            if (TRRow===rowToSkip){\r\n                TRRow++;\r\n                continue;\r\n            }\r\n\r\n            chupacabraGeneration.allSq[TRRow][TRCol].classList.add('right');\r\n            chupacabraGeneration.allSq[TRRow][TRCol+1].classList.add('left');\r\n            TRRow++;\r\n        }\r\n    },\r\n    buildHorizontalWall(BLCol,BRCol,BLRow){\r\n        //pick a random row in TRRow<=range<=BRRow to skip\r\n        const width=BRCol-BLCol+1;\r\n        const colToSkip=Math.floor(Math.random()*(width-1))+BLCol;\r\n\r\n        while(BLCol<=BRCol){\r\n            if (BLCol===colToSkip){\r\n                BLCol++;\r\n                continue;\r\n            }\r\n\r\n            chupacabraGeneration.allSq[BLRow][BLCol].classList.add('bottom');\r\n            chupacabraGeneration.allSq[BLRow+1][BLCol].classList.add('top');\r\n            BLCol++;\r\n        }\r\n    },\r\n    stackMazeGenerator(){\r\n\r\n        chupacabraGeneration.stack.push([0,0,chupacabraGeneration.rows,chupacabraGeneration.cols]);\r\n\r\n        //find timeInterval expressions for my allSq.size\r\n\r\n        chupacabraGeneration.intervalCode=setInterval(()=>{\r\n            if (chupacabraGeneration.stack.length===0){\r\n                clearInterval(chupacabraGeneration.intervalCode);\r\n                return;\r\n            }\r\n            const curr=chupacabraGeneration.stack.pop();\r\n            const TLRow=curr[0];\r\n            const TLCol=curr[1];\r\n            const height=curr[2];\r\n            const width=curr[3];\r\n\r\n            const direction=(height>width)?\"horizontal\":\"vertical\";\r\n            if (direction===\"vertical\"){\r\n                const TRCol=Math.floor(Math.random()*(width-2))+TLCol;\r\n                const TRRow=TLRow;\r\n                const BRRow=TLRow+height-1;\r\n\r\n                chupacabraGeneration.buildVerticalWall(TRRow,BRRow,TRCol);\r\n\r\n                const leftWidth=TRCol-TLCol+1;\r\n                const rightWidth=width-(TRCol-TLCol+1);\r\n                if (leftWidth>1){\r\n                    chupacabraGeneration.stack.push([TLRow,TLCol,height,leftWidth]);\r\n                }\r\n                if (rightWidth>1){\r\n                    chupacabraGeneration.stack.push([TRRow,TRCol+1,height,rightWidth]);\r\n                }\r\n            }\r\n            if (direction===\"horizontal\"){\r\n                const BLCol=TLCol;\r\n                const BLRow=Math.floor(Math.random()*(height-2))+TLRow;\r\n                const BRCol=TLCol+width-1;\r\n\r\n                chupacabraGeneration.buildHorizontalWall(BLCol,BRCol,BLRow);\r\n\r\n                const topHeight=BLRow-TLRow+1;\r\n                const btmHeight=height-(BLRow-TLRow+1);\r\n                if (topHeight>1){\r\n                    chupacabraGeneration.stack.push([TLRow,TLCol,topHeight,width]);\r\n                }\r\n                if (btmHeight>1){\r\n                    chupacabraGeneration.stack.push([BLRow+1,BLCol,btmHeight,width]);\r\n                }\r\n            }\r\n            \r\n\r\n        },4)\r\n    },\r\n    createMaze(difficulty){\r\n        chupacabraGeneration.clean();\r\n        chupacabraGeneration.populateMaze(difficulty);\r\n        chupacabraGeneration.stackMazeGenerator();\r\n    }\r\n}\r\n\r\nexport default chupacabraGeneration","import React, { useEffect } from 'react'\r\nimport chupacabraGeneration from './chupacabraGeneration'\r\nimport './Maze.css'\r\n\r\nconst ChupacabraMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        chupacabraGeneration.createMaze(difficulty);\r\n    })\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default ChupacabraMaze","const cleanSlateGeneration={\r\n\r\n    allSq:[],\r\n    populateMaze(difficulty){\r\n        var numOfSquares=0;\r\n        var sqId=\"\";\r\n        var mazeId=\"\";\r\n        var cols=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                numOfSquares=64;\r\n                sqId=\"easySquare\";\r\n                mazeId=\"easyMaze\";\r\n                cols=8;\r\n                break;\r\n            case \"medium\":\r\n                numOfSquares=300;\r\n                sqId=\"mediumSquare\";\r\n                mazeId=\"mediumMaze\";\r\n                cols=20;\r\n                break;\r\n            case \"hard\":\r\n                numOfSquares=1344;\r\n                sqId=\"hardSquare\";\r\n                mazeId=\"hardMaze\";\r\n                cols=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rows=numOfSquares/cols;\r\n        var id=0;\r\n        for (var i=0;i<rows;i++){\r\n            var row=[];\r\n            for (var j=0;j<cols;j++){\r\n                const sq=document.createElement('div');\r\n                sq.classList.add(sqId);\r\n                sq.classList.add('cleanSlateSq');\r\n                if (i===0){\r\n                    sq.classList.add('top');\r\n                }\r\n                if (i===rows-1){\r\n                    sq.classList.add('bottom');\r\n                }\r\n                if (j===0){\r\n                    sq.classList.add('left');\r\n                }\r\n                if (j===cols-1){\r\n                    sq.classList.add('right');\r\n                }\r\n                sq.setAttribute('key',id);\r\n                id++;\r\n                document.getElementById(mazeId).appendChild(sq);  \r\n                row.push(sq);\r\n            }\r\n            cleanSlateGeneration.allSq.push(row);\r\n        }\r\n    },\r\n    createMaze(difficulty){\r\n        cleanSlateGeneration.populateMaze(difficulty);\r\n    }\r\n}\r\n\r\nexport default cleanSlateGeneration","import React, { useEffect } from 'react'\r\nimport cleanSlateGeneration from './cleanSlateGeneration'\r\nimport './Maze.css'\r\n\r\nconst CleanSlate=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        cleanSlateGeneration.createMaze(difficulty);\r\n    })\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default CleanSlate","class priorityQueue{\r\n    constructor(){\r\n        this.arr=[];\r\n    }\r\n    heapifyUp(index){\r\n\r\n        if (index===0)\r\n            return;\r\n\r\n        const parentIndex=Math.floor((index-1)/2);\r\n        const parentNode=this.arr[parentIndex];\r\n        const currNode=this.arr[index];\r\n\r\n        if (currNode[0]<parentNode[0]){\r\n            this.arr[parentIndex]=currNode;\r\n            this.arr[index]=parentNode;\r\n            this.heapifyUp(parentIndex);\r\n        }\r\n    }\r\n    heapifyDown(index){\r\n        const curr=this.arr[index];\r\n        const arrLength=this.arr.length;\r\n        const leftChild=(2*index+1 < arrLength)?this.arr[2*index+1]:-1;\r\n        const rightChild=(2*index+2 < arrLength)?this.arr[2*index+2]:-1;\r\n\r\n        //no children\r\n        if (leftChild===-1){\r\n            return;\r\n        }//one child, sorted \r\n        else if (curr[0]<leftChild[0] && rightChild===-1){\r\n            return;\r\n        }//two children, sorted\r\n        else if (curr[0]<leftChild[0] && curr[0]<rightChild[0]){\r\n            return;\r\n        }\r\n\r\n        //deciding which of the remaining child (or children) is the smaller for a swap\r\n        var smallerChild=0;\r\n        var smallerIndex=0;\r\n        if (rightChild===-1){\r\n            smallerChild=leftChild;\r\n            smallerIndex=2*index+1;\r\n        }else{\r\n            smallerChild=(leftChild[0]>rightChild[0])?rightChild:leftChild;\r\n            smallerIndex=(leftChild[0]>rightChild[0])?(2*index+2):(2*index+1);\r\n        }\r\n\r\n        this.arr[index]=smallerChild;\r\n        this.arr[smallerIndex]=curr;\r\n\r\n        this.heapifyDown(smallerIndex);\r\n    }\r\n    push(data){\r\n        this.arr.push(data);\r\n        this.heapifyUp(this.arr.length-1);\r\n    }\r\n    pop(){\r\n        const lastNode=this.arr.pop();\r\n        this.arr[0]=lastNode;\r\n        this.heapifyDown(0);\r\n    }\r\n    top(){\r\n        return this.arr[0];\r\n    }\r\n    empty(){\r\n        return (this.arr.length===0)?true:false;\r\n    }\r\n    size(){\r\n        return this.arr.length;\r\n    }\r\n    cleanQueue(){\r\n        this.arr=[];\r\n    }\r\n}\r\n\r\nexport default priorityQueue","import priorityQueue from \"./priorityQueue\";\r\n\r\nconst AStarSolver={\r\n    allSq:[],\r\n    entranceCoord:[],\r\n    exitCoord:[],\r\n    exitKey:0,\r\n    nextPQ:{},\r\n    intervalCode:0,\r\n    parents:[],\r\n    path:[],\r\n    mazeType:\"\",\r\n\r\n    cleanInstVars(){\r\n        AStarSolver.allSq=[];\r\n        AStarSolver.entranceCoord=[];\r\n        AStarSolver.exitCoord=[];\r\n        AStarSolver.exitKey=0;\r\n        AStarSolver.nextPQ={};\r\n        AStarSolver.intervalCode=0;\r\n        AStarSolver.parents=[];\r\n        AStarSolver.path=[];\r\n        AStarSolver.mazeType=\"\";\r\n    },\r\n    getCoord(id){\r\n        const row=Math.floor(id/56);\r\n        const col=Math.floor(id%56);\r\n        return [row,col];\r\n    },\r\n    getEntranceExitCoord(){\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        AStarSolver.entranceCoord=AStarSolver.getCoord(entranceKey);\r\n        \r\n        const exitKey=document.getElementsByClassName('exit')[0].getAttribute('key');\r\n        AStarSolver.exitCoord=AStarSolver.getCoord(exitKey);\r\n        AStarSolver.exitKey=parseInt(exitKey,10);\r\n\r\n        const emptySlateSq=document.getElementsByClassName('emptySlateSq');\r\n        AStarSolver.mazeType=(emptySlateSq.length===0)?\"maze\":\"cleanSlate\";\r\n    },\r\n    getDistEntrance(id){\r\n        const idCoord=AStarSolver.getCoord(id);\r\n        const di=Math.abs(AStarSolver.entranceCoord[0]-idCoord[0]);\r\n        const dj=Math.abs(AStarSolver.entranceCoord[1]-idCoord[1]);\r\n        const dist=Math.round(Math.sqrt(di*di+dj*dj));\r\n        return dist;\r\n    },\r\n    getDistExit(id){\r\n        const idCoord=AStarSolver.getCoord(id);\r\n        const di=Math.abs(AStarSolver.exitCoord[0]-idCoord[0]);\r\n        const dj=Math.abs(AStarSolver.exitCoord[1]-idCoord[1]);\r\n        const dist=Math.round(Math.sqrt(di*di+dj*dj));\r\n        return dist;\r\n    },\r\n    getFCost(id){\r\n        const distEntrance=AStarSolver.getDistEntrance(id);\r\n        const distExit=AStarSolver.getDistExit(id);\r\n        return distEntrance+distExit;\r\n    },\r\n    getNbrKey(currKey,direction){\r\n        const gridSize=AStarSolver.allSq.length;\r\n        currKey=parseInt(currKey,10);\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        rowSize=parseInt(rowSize,10);\r\n\r\n        var up=0,down=0,right=0,left=0;\r\n        switch(direction){\r\n            case 'up':\r\n                return (AStarSolver.allSq[currKey].classList.contains('top'))?-1:currKey-rowSize;\r\n            case 'down':\r\n                return (AStarSolver.allSq[currKey].classList.contains('bottom'))?-1:currKey+rowSize;\r\n            case 'left':\r\n                return (AStarSolver.allSq[currKey].classList.contains('left'))?-1:currKey-1;\r\n            case 'right':\r\n                return (AStarSolver.allSq[currKey].classList.contains('right'))?-1:currKey+1;\r\n            case 'upLeft':\r\n                up=AStarSolver.getNbrKey(currKey,'up');\r\n                left=AStarSolver.getNbrKey(currKey,'left');\r\n                return (up===-1 || left===-1)?-1:currKey-rowSize-1;\r\n            case 'upRight':\r\n                up=AStarSolver.getNbrKey(currKey,'up');\r\n                right=AStarSolver.getNbrKey(currKey,'right');\r\n                return (up===-1 || right===-1)?-1:currKey-rowSize+1;\r\n            case 'downLeft':\r\n                down=AStarSolver.getNbrKey(currKey,'down');\r\n                left=AStarSolver.getNbrKey(currKey,'left');\r\n                return (down===-1 || left===-1)?-1:currKey+rowSize-1;\r\n            case 'downRight':\r\n                down=AStarSolver.getNbrKey(currKey,'down');\r\n                right=AStarSolver.getNbrKey(currKey,'right');\r\n                return (down===-1 || right===-1)?-1:currKey+rowSize+1;\r\n            default:\r\n                return -1;\r\n        }\r\n    },\r\n    isDiagonalSneak(currKey,direction){\r\n        var horizontalNbrKey=0,verticalNbrKey=0;\r\n        switch(direction){\r\n            case 'upRight':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'upLeft':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'downRight':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            case 'downLeft':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        \r\n        const hzntlWall=AStarSolver.allSq[horizontalNbrKey].classList.contains('obstacle');\r\n        const verticalWall=AStarSolver.allSq[verticalNbrKey].classList.contains('obstacle');\r\n        return (hzntlWall && verticalWall);\r\n        \r\n    },\r\n    extractPath(){\r\n        var exitKey=AStarSolver.exitKey;\r\n        while(AStarSolver.parents[exitKey]!==-1){\r\n            AStarSolver.path.unshift(exitKey);\r\n            exitKey=AStarSolver.parents[exitKey];\r\n        }\r\n        AStarSolver.path.unshift(exitKey);\r\n    },\r\n    backTrackPath(){\r\n\r\n        var timeInterval=0;\r\n        \r\n        AStarSolver.intervalCode=setInterval(()=>{\r\n\r\n            if(AStarSolver.path.length===0){\r\n                clearInterval(AStarSolver.intervalCode);\r\n                return;\r\n            }\r\n            \r\n            const lastPos=parseInt(AStarSolver.path.pop(),10);\r\n            AStarSolver.allSq[lastPos].classList.add('current');\r\n        },5);\r\n    },\r\n    solve(difficulty){\r\n        AStarSolver.cleanInstVars();\r\n\r\n        //initializing my instance vars and containers\r\n        AStarSolver.allSq=document.getElementsByClassName('hardSquare');\r\n\r\n        AStarSolver.getEntranceExitCoord();\r\n        for (var i=0;i<AStarSolver.allSq.length;i++){\r\n            AStarSolver.parents.push(-1);\r\n        }\r\n        AStarSolver.nextPQ=new priorityQueue();\r\n        const diagonalMoves=['up','down','left','right','upLeft','upRight','downRight','downLeft'];\r\n        const nonDiagonalMoves=['up','down','left','right'];\r\n\r\n        //pushing entranceKey into PQ\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        AStarSolver.nextPQ.push([0,entranceKey]);\r\n\r\n\r\n\r\n        AStarSolver.intervalCode=setInterval(()=>{\r\n\r\n            const curr=AStarSolver.nextPQ.top();\r\n            AStarSolver.nextPQ.pop();\r\n\r\n            var currKey=curr[1];\r\n\r\n            if (AStarSolver.nextPQ.size()===0){\r\n                clearInterval(AStarSolver.intervalCode);\r\n                return;\r\n            }\r\n\r\n            //early release to avoid processing nodes that are already in set\r\n            while(AStarSolver.allSq[currKey].classList.contains('set')){\r\n                const curr=AStarSolver.nextPQ.top();\r\n                AStarSolver.nextPQ.pop();\r\n                currKey=curr[1];\r\n                if (AStarSolver.nextPQ.size()===1){\r\n                    clearInterval(AStarSolver.intervalCode);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            AStarSolver.allSq[currKey].classList.remove('PQ');\r\n            AStarSolver.allSq[currKey].classList.add('set');\r\n\r\n            var nbrPos=(AStarSolver.mazeType===\"cleanSlate\")?diagonalMoves:nonDiagonalMoves;\r\n            \r\n            for (var i=0;i<nbrPos.length;i++){\r\n                const nbrKey=parseInt(AStarSolver.getNbrKey(currKey,nbrPos[i]),10);\r\n                //skip nbr if its an out of bounds,obstacle or its already in visitedSet\r\n                if (nbrKey>=AStarSolver.allSq.length){\r\n                    console.log(\"ERROR: \"+nbrKey);\r\n                    continue;\r\n                }\r\n                if (nbrKey==-1)\r\n                    continue;\r\n                if (AStarSolver.allSq[nbrKey].classList.contains('obstacle'))\r\n                    continue;\r\n                if (i>3 && AStarSolver.isDiagonalSneak(currKey,nbrPos[i]))\r\n                    continue;\r\n                if (AStarSolver.allSq[nbrKey].classList.contains('set'))\r\n                    continue;\r\n                \r\n                const nbrF=AStarSolver.getFCost(nbrKey);\r\n                AStarSolver.parents[nbrKey]=currKey;\r\n                AStarSolver.allSq[nbrKey].classList.add('PQ');\r\n                AStarSolver.nextPQ.push([nbrF,nbrKey]);\r\n\r\n                if (nbrKey===AStarSolver.exitKey){\r\n                    clearInterval(AStarSolver.intervalCode);\r\n                    AStarSolver.extractPath();\r\n                    AStarSolver.backTrackPath();\r\n                    return;\r\n                }\r\n\r\n            }\r\n        },10)\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default AStarSolver","import React,{useEffect} from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './Navbar.css'\r\n\r\n\r\nconst Navbar=()=>{\r\n\r\n    useEffect(()=>{\r\n        //hovering effects on pickMaze/makeYourOwn btns\r\n        document.getElementById('pickMaze').addEventListener('mouseenter',()=>{\r\n            document.getElementById('leftDullScreen').classList.add('hidden');\r\n            document.getElementById('rightDullScreen').classList.remove('hidden');\r\n        })\r\n        document.getElementById('makeYourOwn').addEventListener('mouseenter',()=>{\r\n            document.getElementById('leftDullScreen').classList.remove('hidden');\r\n            document.getElementById('rightDullScreen').classList.add('hidden');\r\n        })\r\n\r\n        //controls logic of GNERATE / BUILD WALLS sections\r\n        document.getElementById('mazeMenu').addEventListener('change',()=>{\r\n            document.getElementById('makeYourOwnCheckbox').checked=false;\r\n            document.getElementById('secondNavbarSectionGenerate').classList.remove('hidden');\r\n            document.getElementById('buildWalls').classList.add('hidden');\r\n            document.getElementById('thirdNavbarSection').classList.add('hidden');\r\n            document.getElementById('fourthNavbarSection').classList.add('hidden');\r\n\r\n        })\r\n        document.getElementById('makeYourOwnCheckbox').addEventListener('click',()=>{\r\n            document.getElementById('mazeMenu').selectedIndex=0;\r\n\r\n            document.getElementById('secondNavbarSectionGenerate').classList.add('hidden');\r\n            document.getElementById('buildWalls').classList.remove('hidden');\r\n            document.getElementById('thirdNavbarSection').classList.remove('hidden');\r\n            document.getElementById('fourthNavbarSection').classList.remove('hidden');\r\n\r\n\r\n            document.getElementById('sidebarCleanSlate').click();\r\n        })\r\n        document.getElementById('generateBtn').addEventListener('click',()=>{\r\n            document.getElementById('thirdNavbarSection').classList.remove('hidden');\r\n            document.getElementById('fourthNavbarSection').classList.remove('hidden');\r\n\r\n        })\r\n\r\n        //clicking on a buildWall/setEntrance/setExit btn fully colors it and unselects other btns\r\n        const setBtn=document.getElementsByClassName('setBtn');\r\n        setBtn[0].addEventListener('click',(event)=>{\r\n            unselectAllSetBtns();\r\n            event.target.classList.add('blackBtn');\r\n        })\r\n        setBtn[1].addEventListener('click',(event)=>{\r\n            unselectAllSetBtns();\r\n            event.target.classList.add('greenBtn');\r\n        })\r\n        setBtn[2].addEventListener('click',(event)=>{\r\n            unselectAllSetBtns();\r\n            event.target.classList.add('redBtn');\r\n        })\r\n\r\n    })\r\n\r\n    const unselectAllSetBtns=()=>{\r\n        const setBtn=document.getElementsByClassName('setBtn');\r\n        setBtn[0].classList.remove('blackBtn');\r\n        setBtn[1].classList.remove('greenBtn');\r\n        setBtn[2].classList.remove('redBtn');\r\n    }\r\n    const generateMaze=()=>{\r\n        const mazeVal=document.getElementById('mazeMenu').value;\r\n        switch(mazeVal){\r\n            case 'snakey':\r\n                document.getElementById('sidebarDFS').click();\r\n                break;\r\n            case 'tsunami':\r\n                document.getElementById('sidebarPrims').click();\r\n                break;\r\n            case 'kruskals':\r\n                document.getElementById('sidebarKruskals').click();\r\n                break;\r\n            case 'curtains':\r\n                document.getElementById('sidebarEllers').click();\r\n                break;\r\n            case 'chupacabra':\r\n                document.getElementById('sidebarChupacabra').click();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const buildWalls=()=>{\r\n        document.getElementById('sidebarSetObstacle').click();\r\n    }\r\n    const setExit=()=>{\r\n        document.getElementById('sidebarSetExit').click();\r\n    }\r\n    const setEntrance=()=>{\r\n        document.getElementById('sidebarSetEntrance').click();\r\n    }\r\n    const sendIt=()=>{\r\n        const algo=document.getElementById('algoMenu').value;\r\n        const exit=document.getElementsByClassName('exit');\r\n        const entrance=document.getElementsByClassName('entrance');\r\n\r\n        if (algo!=='empty'){\r\n            document.getElementById('algoMenu').classList.remove('missingAlgoShade');\r\n        }\r\n        if (algo===\"empty\"){\r\n            document.getElementById('algoMenu').classList.add('missingAlgoShade');\r\n        }\r\n        if (entrance.length===0){\r\n            document.getElementById('setEntranceBtn').click();\r\n        }\r\n        else if (exit.length===0){\r\n            document.getElementById('setExitBtn').click();\r\n        }\r\n\r\n        if (algo!=='empty' && entrance.length!==0 && exit.length!==0){\r\n            document.getElementById(algo).click();\r\n            document.getElementById('fourthNavbarSection').classList.add('hidden');\r\n            document.getElementById('fifthNavbarSection').classList.remove('hidden');\r\n        }\r\n    }\r\n    const cleanPath=()=>{\r\n        var explored=document.getElementsByClassName('explored');\r\n        while(explored.length>0){\r\n            explored[0].classList.remove('explored');\r\n        }\r\n\r\n        var current=document.getElementsByClassName('current');\r\n        while(current.length>0){\r\n            current[0].classList.remove('current');\r\n        }\r\n\r\n        var set=document.getElementsByClassName('set');\r\n        while(set.length>0){\r\n            set[0].classList.remove('set');\r\n        }\r\n\r\n        var PQ=document.getElementsByClassName('PQ');\r\n        while(PQ.length>0){\r\n            PQ[0].classList.remove('PQ');\r\n        }\r\n\r\n        document.getElementById('fifthNavbarSection').classList.add('hidden');\r\n        document.getElementById('fourthNavbarSection').classList.remove('hidden');\r\n    }\r\n    const cleanGrid=()=>{\r\n        var obstacles=document.getElementsByClassName('obstacle');\r\n        while(obstacles.length>0){\r\n            obstacles[0].classList.remove('obstacle');\r\n        }\r\n        var entrance=document.getElementsByClassName('entrance');\r\n        while(entrance.length>0){\r\n            entrance[0].classList.remove('entrance');\r\n        }\r\n        var exit=document.getElementsByClassName('exit');\r\n        while(exit.length>0){\r\n            exit[0].classList.remove('exit');\r\n        }\r\n        var hE=document.getElementsByClassName('hoverEntrance');\r\n        while(hE.length>0){\r\n            hE[0].classList.remove('hoverEntrance');\r\n        }\r\n        var hEx=document.getElementsByClassName('hoverExit');\r\n        while(hEx.length>0){\r\n            hEx[0].classList.remove('hoverExit');\r\n        }\r\n        var hObs=document.getElementsByClassName('hoverObstacle');\r\n        while(hObs.length>0){\r\n            hObs[0].classList.remove('hoverObstacle');\r\n        }\r\n        cleanPath();\r\n    }\r\n\r\n    return <div id='navbarMain'>\r\n        <div id='firstNavbarSection' className='navbarSection'>\r\n            <div id='pickMaze'>\r\n                <div className='dullSection hidden' id='leftDullScreen'></div>\r\n                PICK A MAZE\r\n                <select name=\"mazeMenu\" id=\"mazeMenu\">\r\n                    <option value=\"empty\"></option>\r\n                    <option value=\"snakey\">Anaconda</option>\r\n                    <option value=\"tsunami\">Tsunami</option>\r\n                    <option value=\"kruskals\">Ant Farm</option>\r\n                    <option value=\"curtains\">Curtains</option>\r\n                    <option value=\"chupacabra\">Chupacabra</option>\r\n                </select>\r\n            </div>\r\n            <div id='makeYourOwn'>\r\n                <div className='dullSection' id='rightDullScreen'></div>\r\n                MAKE YOUR OWN\r\n                <input type='checkbox' id='makeYourOwnCheckbox'></input>\r\n            </div>\r\n        </div>\r\n        <div id='secondNavbarSectionGenerate' className='navbarSection hidden'>\r\n            <Button id='generateBtn' style={{fontSize:'25px',margin:'10px 0'}} className='gridReadyBtn' onClick={generateMaze}>GENERATE</Button>\r\n        </div>\r\n        <div id='thirdNavbarSection' className='navbarSection hidden'>\r\n            <div id='buildWalls' className='setSquare hidden'><Button variant='outline-dark' className='setBtn' id='buildWallsBtn' onClick={buildWalls}>BUILD WALLS clickN'drag</Button></div>\r\n            <div id='pickEntrance' className='setSquare'><Button variant='outline-success' className='setBtn' id='setEntranceBtn' onClick={setEntrance}>PICK A STARTING POINT</Button></div>\r\n            <div id='pickExit' className='setSquare'><Button variant='outline-danger' className='setBtn' id='setExitBtn' onClick={setExit}>PICK A FINISHING POINT</Button></div>\r\n        </div>\r\n        <div id='fourthNavbarSection' className='navbarSection hidden'>\r\n            <div>\r\n                CHOOSE AN ALGO\r\n                <select name=\"algoMenu\" id=\"algoMenu\">\r\n                    <option value=\"empty\"></option>\r\n                    <option value=\"solveDFS\">Silly Python</option>\r\n                    <option value=\"solveBFS\">OMG THEYRE COMING!</option>\r\n                    <option value=\"solveAStar\">Big Brain A.I.</option>\r\n                </select>\r\n            </div>\r\n            <Button variant='danger' id='sendItBtn' onClick={sendIt}>SEND IT</Button>\r\n        </div>\r\n        <div id='fifthNavbarSection' className='navbarSection hidden'>\r\n            <Button variant='success' className='resetNavbarBtn' onClick={cleanPath}>CLEAN PATH</Button>\r\n            <Button variant='dark' className='resetNavbarBtn' onClick={cleanGrid}>CLEAN GRID</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Navbar","import React,{useState,useEffect} from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport KruskalsMaze from './appFiles/KruskalsMaze'\nimport DFSMaze from './appFiles/DFSMaze'\nimport PrimsMaze from './appFiles/PrimsMaze'\nimport EllersMaze from './appFiles/EllersMaze'\nimport ChupacabraMaze from './appFiles/ChupacabraMaze'\nimport CleanSlate from './appFiles/CleanSlate'\nimport mazeSolver from './appFiles/mazeSolver'\nimport AStarSolver from './appFiles/AStarSolver'\nimport Navbar from './appFiles/Navbar.js'\n\nconst SideMenu=(props)=>{\n  \n  const {difficulty,setMazeName}=props.options;\n\n  return <div id='sideMenu' className='hidden'>\n    <div className='sideMenuBtn' id='sidebarPrims' onClick={()=>{setMazeName('prims')}}>PRIMS</div>\n    <div className='sideMenuBtn' id='sidebarKruskals' onClick={()=>{setMazeName('kruskals')}}>KRUSKALS</div>\n    <div className='sideMenuBtn' id='sidebarDFS' onClick={()=>{setMazeName('DFS')}}>DFS</div>\n    <div className='sideMenuBtn' id='sidebarEllers' onClick={()=>{setMazeName('ellers')}}>ELLERS</div>\n    <div className='sideMenuBtn' id='sidebarChupacabra' onClick={()=>{setMazeName('chupacabra')}}>CHUPACABRA</div>\n    <div className='sideMenuBtn' id='sidebarCleanSlate' onClick={()=>{setMazeName('cleanSlate')}}>CLEAN SLATE</div>\n\n    <div className='sideMenuBtn' id='sidebarSetEntrance' onClick={()=>{mazeSolver.setEntrance(difficulty)}}>Set ENTRANCE</div>\n    <div className='sideMenuBtn' id='sidebarSetExit' onClick={()=>{mazeSolver.setExit(difficulty)}}>Set EXIT</div>\n    <div className='sideMenuBtn' id='sidebarSetObstacle' onClick={()=>{mazeSolver.setObstacle(difficulty)}}>Set OBSTACLE</div>\n\n\n    <div className='sideMenuBtn' id='solveDFS' onClick={()=>{mazeSolver.dfs(difficulty)}}>Solve DFS</div>\n    <div className='sideMenuBtn' id='solveBFS' onClick={()=>{mazeSolver.bfs(difficulty)}}>Solve BFS</div>\n    <div className='sideMenuBtn' id='solveAStar' onClick={()=>{AStarSolver.solve(difficulty)}}>Solve A*</div>\n\n  </div>\n\n};\nconst MazeSection=(props)=>{\n  const {difficulty,mazeName}=props.options;\n\n  switch (mazeName){\n    case 'DFS':\n      return <DFSMaze difficulty={difficulty} />\n    case 'kruskals':\n      return <KruskalsMaze difficulty={difficulty} />\n    case 'prims':\n      return <PrimsMaze difficulty={difficulty} />\n    case 'ellers':\n      return <EllersMaze difficulty={difficulty} />\n    case 'chupacabra':\n      return <ChupacabraMaze difficulty={difficulty} />\n    case 'cleanSlate':\n      return <CleanSlate difficulty={difficulty} />\n    default:\n      return <div id='hardMaze'></div>\n  }\n\n  \n}\n\n// function App(){\n//   const [windowSize,setWindowSize]=useState([]);\n\n//   useEffect(()=>{\n//     var intCode=setInterval((e)=>{\n//       const w=window.innerWidth, h=window.innerHeight;\n//       if (w<350 && h<1500){\n//         console.log(\"PLEASE zOOM OUT\");\n//       }else{\n//         console.log(e);\n//       }\n//     },500)\n//   })\n\n//   return <React.Fragment>HI</React.Fragment>\n// }\n\nfunction App() {\n\n  const [mazeName,setMazeName]=useState('');\n  const [difficulty,setDifficulty]=useState('hard');\n  \n  return <React.Fragment>\n    <SideMenu options={{difficulty,setDifficulty,setMazeName}}/>\n    <MazeSection options={{mazeName,difficulty}}/>\n    <Navbar/>\n  </React.Fragment>\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}