[{"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\index.js":"1","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\App.js":"2","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\reportWebVitals.js":"3","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\mazeGeneration.js":"4","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\chickenMovement.js":"5","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\mazeSolver.js":"6","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\primsGeneration.js":"7","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\kruskalsGeneration.js":"8","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\DFSMaze.js":"9","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\KruskalsMaze.js":"10","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\PrimsMaze.js":"11","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\EllersMaze.js":"12","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\ellersGeneration.js":"13","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\ChupacabraMaze.js":"14","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\chupacabraGeneration.js":"15","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\CleanSlate.js":"16","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\cleanSlateGeneration.js":"17","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\priorityQueue.js":"18","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\AStarSolver.js":"19","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\Navbar.js":"20"},{"size":500,"mtime":499162500000,"results":"21","hashOfConfig":"22"},{"size":2924,"mtime":1612031720566,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":8301,"mtime":1611947851611,"results":"25","hashOfConfig":"22"},{"size":2948,"mtime":1611120707260,"results":"26","hashOfConfig":"27"},{"size":17042,"mtime":1612046781466,"results":"28","hashOfConfig":"22"},{"size":6654,"mtime":1611947740678,"results":"29","hashOfConfig":"22"},{"size":7391,"mtime":1611947378575,"results":"30","hashOfConfig":"22"},{"size":698,"mtime":1611718059849,"results":"31","hashOfConfig":"22"},{"size":725,"mtime":1611718124370,"results":"32","hashOfConfig":"22"},{"size":693,"mtime":1611435633011,"results":"33","hashOfConfig":"22"},{"size":724,"mtime":1611512157959,"results":"34","hashOfConfig":"22"},{"size":8063,"mtime":1611948051746,"results":"35","hashOfConfig":"22"},{"size":720,"mtime":1611718029816,"results":"36","hashOfConfig":"22"},{"size":5530,"mtime":1611948231831,"results":"37","hashOfConfig":"22"},{"size":712,"mtime":1611718045121,"results":"38","hashOfConfig":"22"},{"size":1897,"mtime":1611709582532,"results":"39","hashOfConfig":"22"},{"size":2082,"mtime":1611717519556,"results":"40","hashOfConfig":"22"},{"size":8841,"mtime":1611876801515,"results":"41","hashOfConfig":"22"},{"size":6771,"mtime":1612048376801,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"q0w5x3",{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ik2r73",{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"45"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\index.js",[],["92","93"],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\App.js",["94"],"import React,{useState,useEffect} from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport KruskalsMaze from './appFiles/KruskalsMaze'\nimport DFSMaze from './appFiles/DFSMaze'\nimport PrimsMaze from './appFiles/PrimsMaze'\nimport EllersMaze from './appFiles/EllersMaze'\nimport ChupacabraMaze from './appFiles/ChupacabraMaze'\nimport CleanSlate from './appFiles/CleanSlate'\nimport mazeSolver from './appFiles/mazeSolver'\nimport AStarSolver from './appFiles/AStarSolver'\nimport Navbar from './appFiles/Navbar.js'\n\nconst SideMenu=(props)=>{\n  \n  const {difficulty,setMazeName}=props.options;\n\n  return <div id='sideMenu' className='hidden'>\n    <div className='sideMenuBtn' id='sidebarPrims' onClick={()=>{setMazeName('prims')}}>PRIMS</div>\n    <div className='sideMenuBtn' id='sidebarKruskals' onClick={()=>{setMazeName('kruskals')}}>KRUSKALS</div>\n    <div className='sideMenuBtn' id='sidebarDFS' onClick={()=>{setMazeName('DFS')}}>DFS</div>\n    <div className='sideMenuBtn' id='sidebarEllers' onClick={()=>{setMazeName('ellers')}}>ELLERS</div>\n    <div className='sideMenuBtn' id='sidebarChupacabra' onClick={()=>{setMazeName('chupacabra')}}>CHUPACABRA</div>\n    <div className='sideMenuBtn' id='sidebarCleanSlate' onClick={()=>{setMazeName('cleanSlate')}}>CLEAN SLATE</div>\n\n    <div className='sideMenuBtn' id='sidebarSetEntrance' onClick={()=>{mazeSolver.setEntrance(difficulty)}}>Set ENTRANCE</div>\n    <div className='sideMenuBtn' id='sidebarSetExit' onClick={()=>{mazeSolver.setExit(difficulty)}}>Set EXIT</div>\n    <div className='sideMenuBtn' id='sidebarSetObstacle' onClick={()=>{mazeSolver.setObstacle(difficulty)}}>Set OBSTACLE</div>\n\n\n    <div className='sideMenuBtn' id='solveDFS' onClick={()=>{mazeSolver.dfs(difficulty)}}>Solve DFS</div>\n    <div className='sideMenuBtn' id='solveBFS' onClick={()=>{mazeSolver.bfs(difficulty)}}>Solve BFS</div>\n    <div className='sideMenuBtn' id='solveAStar' onClick={()=>{AStarSolver.solve(difficulty)}}>Solve A*</div>\n\n  </div>\n\n};\nconst MazeSection=(props)=>{\n  const {difficulty,mazeName}=props.options;\n\n  switch (mazeName){\n    case 'DFS':\n      return <DFSMaze difficulty={difficulty} />\n    case 'kruskals':\n      return <KruskalsMaze difficulty={difficulty} />\n    case 'prims':\n      return <PrimsMaze difficulty={difficulty} />\n    case 'ellers':\n      return <EllersMaze difficulty={difficulty} />\n    case 'chupacabra':\n      return <ChupacabraMaze difficulty={difficulty} />\n    case 'cleanSlate':\n      return <CleanSlate difficulty={difficulty} />\n    default:\n      return <div id='hardMaze'></div>\n  }\n\n  \n}\n\nfunction App() {\n\n  const [mazeName,setMazeName]=useState('');\n  const [difficulty,setDifficulty]=useState('hard');\n  \n  return <React.Fragment>\n    <SideMenu options={{difficulty,setDifficulty,setMazeName}}/>\n    <MazeSection options={{mazeName,difficulty}}/>\n    <Navbar/>\n  </React.Fragment>\n  \n}\n\nexport default App;\n","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\reportWebVitals.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\mazeGeneration.js",["95"],"import mazeSolver from \"./mazeSolver\";\r\n\r\nconst mazeGeneration={\r\n    allSq:[],\r\n    isVisited:[],\r\n    firstKey:0,\r\n    exitKey:0,\r\n    posStack:[],\r\n    visitedCounter:0,\r\n    intervalCode:0,\r\n\r\n    clean(){\r\n        mazeGeneration.allSq=[];\r\n        mazeGeneration.isVisited=[];\r\n        mazeGeneration.firstKey=0;\r\n        mazeGeneration.exitKey=0;\r\n        mazeGeneration.posStack=[];\r\n        mazeGeneration.visitedCounter=0;\r\n        mazeGeneration.intervalCode=0;\r\n    },\r\n    populateMaze(difficulty){\r\n\r\n        var numOfSquares=0;\r\n        var sqId=\"\";\r\n        var mazeId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                numOfSquares=64;\r\n                sqId=\"easySquare\";\r\n                mazeId=\"easyMaze\";\r\n                break;\r\n            case \"medium\":\r\n                numOfSquares=300;\r\n                sqId=\"mediumSquare\";\r\n                mazeId=\"mediumMaze\";\r\n                break;\r\n            case \"hard\":\r\n                numOfSquares=1344;\r\n                sqId=\"hardSquare\";\r\n                mazeId=\"hardMaze\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        for (var i=0;i<numOfSquares;i++){\r\n            const sq=document.createElement('div');\r\n            sq.classList.add(sqId);\r\n            sq.classList.add('top');\r\n            sq.classList.add('bottom');\r\n            sq.classList.add('left');\r\n            sq.classList.add('right');\r\n            sq.setAttribute('key',i);\r\n            document.getElementById(mazeId).appendChild(sq);  \r\n            mazeGeneration.allSq.push(sq);\r\n            mazeGeneration.isVisited.push(false);\r\n        }\r\n        \r\n        \r\n        \r\n    },\r\n    pickStartingSq(difficulty){\r\n        var num=0;\r\n\r\n        if (difficulty==='easy'){\r\n            num=Math.floor(Math.random()*7.99);\r\n        }\r\n        if (difficulty==='medium'){\r\n            num=Math.floor(Math.random()*19.99);\r\n        }\r\n        if (difficulty==='hard'){\r\n            num=Math.floor(Math.random()*55.99);\r\n        }\r\n        mazeGeneration.firstKey=num;\r\n        mazeGeneration.isVisited[num]=true;\r\n        mazeGeneration.allSq[num].classList.add('current');\r\n        // mazeGeneration.allSq[num].classList.add('entrance');\r\n\r\n        mazeGeneration.posStack.push(num);\r\n        mazeGeneration.visitedCounter++;\r\n    },\r\n    currentMovement(currKey,direction){\r\n        var nextKey=0;\r\n        var rowSize=0;\r\n        switch(mazeGeneration.allSq.length){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        switch(direction){\r\n            case 'up':\r\n                nextKey=currKey-rowSize;\r\n                mazeGeneration.allSq[currKey].classList.remove('top');\r\n                mazeGeneration.allSq[nextKey].classList.remove('bottom');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n\r\n                break;\r\n            case 'down':\r\n                nextKey=currKey+rowSize;\r\n                mazeGeneration.allSq[currKey].classList.remove('bottom');\r\n                mazeGeneration.allSq[nextKey].classList.remove('top');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n                break;\r\n            case 'left':\r\n                nextKey=currKey-1;\r\n                mazeGeneration.allSq[currKey].classList.remove('left');\r\n                mazeGeneration.allSq[nextKey].classList.remove('right');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n                break;\r\n            case 'right':\r\n                nextKey=currKey+1;\r\n                mazeGeneration.allSq[currKey].classList.remove('right');\r\n                mazeGeneration.allSq[nextKey].classList.remove('left');\r\n\r\n                mazeGeneration.allSq[currKey].classList.remove('current');\r\n                mazeGeneration.allSq[nextKey].classList.add('current');\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    getNbrKey(currKey,direction){\r\n        const gridSize=mazeGeneration.isVisited.length;\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }  \r\n\r\n        switch (direction){\r\n            case 'up':\r\n                return (currKey<rowSize)?-1:currKey-rowSize;\r\n            case 'down':\r\n                return ((gridSize-rowSize)<=currKey)?-1:currKey+rowSize;\r\n            case 'left':\r\n                return ((currKey%rowSize)===0)?-1:currKey-1;\r\n            case 'right':\r\n                return ((currKey+1)%rowSize===0)?-1:currKey+1;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    //generates the maze walls using a timeInterval\r\n    stackRandomMazeGenerator(difficulty){\r\n\r\n        var timeInterval=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                timeInterval=40;\r\n                break;\r\n            case \"medium\":\r\n                timeInterval=15;\r\n                break;\r\n            case \"hard\":\r\n                timeInterval=1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var nbrPositions=[\"up\",\"down\",\"left\",\"right\"];\r\n\r\n        mazeGeneration.intervalCode=setInterval(()=>{\r\n            if (mazeGeneration.visitedCounter===mazeGeneration.isVisited.length){\r\n                clearInterval(mazeGeneration.intervalCode);\r\n                document.getElementsByClassName('current')[0].classList.add('visited');\r\n                document.getElementsByClassName('current')[0].classList.remove('current');\r\n                return;\r\n            }\r\n\r\n            document.getElementsByClassName('current')[0].classList.add('visited');\r\n            document.getElementsByClassName('current')[0].classList.remove('current');\r\n            const currPos=mazeGeneration.posStack[mazeGeneration.posStack.length-1];\r\n            mazeGeneration.allSq[currPos].classList.add('current');          \r\n\r\n            nbrPositions.sort(()=>Math.random()-.5);\r\n\r\n            for (var i=0;i<4;i++){\r\n                const nbrKey=mazeGeneration.getNbrKey(currPos,nbrPositions[i]);\r\n                if (nbrKey!==-1 && !mazeGeneration.isVisited[nbrKey]){\r\n                    mazeGeneration.currentMovement(currPos,nbrPositions[i]);\r\n                    mazeGeneration.isVisited[nbrKey]=true;\r\n                    mazeGeneration.posStack.push(nbrKey);\r\n                    mazeGeneration.visitedCounter++;\r\n                    return;\r\n                }\r\n            }\r\n            mazeGeneration.posStack.pop();\r\n        },timeInterval)\r\n    },\r\n    //this function isn't really used but I keep it cause its cool\r\n    recursiveRandomMazeGenerator(currKey){\r\n\r\n        //shuffle all poss nbrs\r\n        var nbrPositions=[\"up\",\"down\",\"left\",\"right\"];\r\n        nbrPositions.sort(()=>Math.random()-.5);\r\n\r\n        //recurse into each nbr\r\n        for (var i=0;i<4;i++){\r\n\r\n            const direction=nbrPositions[i];\r\n            const nbrKey=mazeGeneration.getNbrKey(currKey,direction);\r\n\r\n            if (nbrKey!==-1 && !mazeGeneration.isVisited[nbrKey]){\r\n                mazeGeneration.isVisited[nbrKey]=true;\r\n                mazeGeneration.currentMovement(currKey,direction);\r\n                mazeGeneration.recursiveRandomMazeGenerator(nbrKey);\r\n            }\r\n        }\r\n    },\r\n    //easily called function that calls all steps required to generate the maze\r\n    createMaze(difficulty){\r\n        mazeGeneration.clean();\r\n        mazeGeneration.populateMaze(difficulty);\r\n        mazeGeneration.pickStartingSq(difficulty);\r\n        mazeGeneration.stackRandomMazeGenerator(difficulty);\r\n    }\r\n}\r\n\r\nexport default mazeGeneration","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\chickenMovement.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\mazeSolver.js",["96","97"],"\r\nconst mazeSolver={\r\n    intervalCode:0,\r\n    path:[],\r\n    prevV:[],\r\n    isVisited:[],\r\n    allSq:[],\r\n    nextBFSRound:[],\r\n    currBFSRound:[],\r\n    isMouseDown:false,\r\n    mazeType:'',\r\n\r\n    cleanInstVars(){\r\n        mazeSolver.intervalCode=0;\r\n        mazeSolver.path=[];\r\n        mazeSolver.prevV=[];\r\n        mazeSolver.isVisited=[];\r\n        mazeSolver.allSq=[];\r\n        mazeSolver.nextBFSRound=[];\r\n        mazeSolver.currBFSRound=[];\r\n        mazeSolver.isMouseDown=false;\r\n        mazeSolver.mazeType='';\r\n\r\n        var curr=document.getElementsByClassName('current');\r\n        while(curr.length>0){\r\n            curr[0].classList.remove('current');\r\n        }\r\n        var explored=document.getElementsByClassName('explored');\r\n        while(explored.length>0){\r\n            explored[0].classList.remove('explored');\r\n        }\r\n\r\n        mazeSolver.allSq=document.getElementsByClassName('hardSquare');\r\n    },\r\n    pickEntrance(event){\r\n        const prevEntrance=document.getElementsByClassName('entrance');\r\n        if (prevEntrance.length!==0){\r\n          prevEntrance[0].classList.remove('entrance');\r\n        }\r\n        event.target.classList.add('entrance');\r\n\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){    \r\n            mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n            mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n            mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickEntrance);\r\n        }\r\n\r\n        const setBtn=document.getElementsByClassName('setBtn');\r\n        setBtn[1].classList.remove('greenBtn');\r\n    },\r\n    toggleHoverEntrance(event){\r\n        event.target.classList.toggle('hoverEntrance');\r\n    },\r\n    pickExit(event){\r\n        const prevExit=document.getElementsByClassName('exit');\r\n        if (prevExit.length!==0){\r\n          prevExit[0].classList.remove('exit');\r\n        }\r\n        event.target.classList.add('exit');\r\n\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){      \r\n            mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n            mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n            mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickExit);\r\n        }\r\n\r\n        const setBtn=document.getElementsByClassName('setBtn');\r\n        setBtn[2].classList.remove('redBtn');\r\n    },\r\n    toggleHoverExit(event){\r\n        event.target.classList.toggle('hoverExit');\r\n    },\r\n    toggleHoverObstacle(event){\r\n\r\n        if (event.target.classList.contains('obstacle'))\r\n            return;\r\n            \r\n        if (!mazeSolver.isMouseDown)\r\n            event.target.classList.toggle('hoverObstacle');\r\n        if (mazeSolver.isMouseDown)\r\n            event.target.classList.add('obstacle');\r\n    },\r\n    pickObstacle(event){\r\n        mazeSolver.isMouseDown=true;\r\n        event.target.classList.add('obstacle');\r\n        event.target.classList.remove('hoverObstacle');\r\n    },\r\n    release(event){\r\n        mazeSolver.isMouseDown=false;\r\n    },\r\n    setEntrance(difficulty){\r\n        var sqId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                sqId=\"easySquare\";\r\n                break;\r\n            case \"medium\":\r\n                sqId=\"mediumSquare\";\r\n                break;\r\n            case \"hard\":\r\n                sqId=\"hardSquare\";\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n\r\n        mazeSolver.allSq=document.getElementsByClassName(sqId);\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickExit);\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].removeEventListener('mousedown',mazeSolver.pickObstacle);\r\n        mazeSolver.allSq[i].removeEventListener('mouseup',mazeSolver.release);\r\n\r\n        mazeSolver.allSq[i].addEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].addEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].addEventListener('click',mazeSolver.pickEntrance);\r\n        }\r\n    },\r\n    setExit(difficulty){\r\n        var sqId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                sqId=\"easySquare\";\r\n                break;\r\n            case \"medium\":\r\n                sqId=\"mediumSquare\";\r\n                break;\r\n            case \"hard\":\r\n                sqId=\"hardSquare\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    \r\n        mazeSolver.allSq=document.getElementsByClassName(sqId);\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n    \r\n          mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n          mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n          mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickEntrance);\r\n\r\n          mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverObstacle);\r\n          mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverObstacle);\r\n          mazeSolver.allSq[i].removeEventListener('mousedown',mazeSolver.pickObstacle);\r\n          mazeSolver.allSq[i].removeEventListener('mouseup',mazeSolver.release);\r\n    \r\n          mazeSolver.allSq[i].addEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n          mazeSolver.allSq[i].addEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n          mazeSolver.allSq[i].addEventListener('click',mazeSolver.pickExit);\r\n        }\r\n    },\r\n    setObstacle(difficulty){\r\n        var sqId=\"\";\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                sqId=\"easySquare\";\r\n                break;\r\n            case \"medium\":\r\n                sqId=\"mediumSquare\";\r\n                break;\r\n            case \"hard\":\r\n                sqId=\"hardSquare\";\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n\r\n        mazeSolver.allSq=document.getElementsByClassName(sqId);\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverExit);\r\n        mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickExit);\r\n\r\n        mazeSolver.allSq[i].removeEventListener('mouseenter',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].removeEventListener('mouseout',mazeSolver.toggleHoverEntrance);\r\n        mazeSolver.allSq[i].removeEventListener('click',mazeSolver.pickEntrance);\r\n\r\n        mazeSolver.allSq[i].addEventListener('mouseenter',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].addEventListener('mouseout',mazeSolver.toggleHoverObstacle);\r\n        mazeSolver.allSq[i].addEventListener('mousedown',mazeSolver.pickObstacle);\r\n        mazeSolver.allSq[i].addEventListener('mouseup',mazeSolver.release);\r\n        }\r\n    },\r\n    getNbrKey(currKey, direction){\r\n        const gridSize=mazeSolver.allSq.length;\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        var up=0,down=0,right=0,left=0;\r\n        switch (direction){\r\n            case 'up':\r\n                return (mazeSolver.allSq[currKey].classList.contains('top'))?-1:currKey-rowSize;\r\n            case 'down':\r\n                return (mazeSolver.allSq[currKey].classList.contains('bottom'))?-1:currKey+rowSize;\r\n            case 'left':\r\n                return (mazeSolver.allSq[currKey].classList.contains('left'))?-1:currKey-1;\r\n            case 'right':\r\n                return (mazeSolver.allSq[currKey].classList.contains('right'))?-1:currKey+1;\r\n            case 'upLeft':\r\n                up=mazeSolver.getNbrKey(currKey,'up');\r\n                left=mazeSolver.getNbrKey(currKey,'left');\r\n                return (up===-1 || left===-1)?-1:currKey-rowSize-1;\r\n            case 'upRight':\r\n                up=mazeSolver.getNbrKey(currKey,'up');\r\n                right=mazeSolver.getNbrKey(currKey,'right');\r\n                return (up===-1 || right===-1)?-1:currKey-rowSize+1;\r\n            case 'downLeft':\r\n                down=mazeSolver.getNbrKey(currKey,'down');\r\n                left=mazeSolver.getNbrKey(currKey,'left');\r\n                return (down===-1 || left===-1)?-1:currKey+rowSize-1;\r\n            case 'downRight':\r\n                down=mazeSolver.getNbrKey(currKey,'down');\r\n                right=mazeSolver.getNbrKey(currKey,'right');\r\n                return (down===-1 || right===-1)?-1:currKey+rowSize+1;\r\n            default:\r\n                return -1;\r\n        }\r\n    },\r\n    extractPath(){\r\n        var exitKey=document.getElementsByClassName('exit')[0].getAttribute('key');\r\n        while(mazeSolver.prevV[exitKey]!==-1){\r\n            mazeSolver.path.unshift(exitKey);\r\n            exitKey=mazeSolver.prevV[exitKey];\r\n        }\r\n        mazeSolver.path.unshift(exitKey);\r\n    },\r\n    backTrackPath(){\r\n\r\n        var timeInterval=0;\r\n        const gridSize=mazeSolver.allSq.length;\r\n        switch(gridSize){\r\n            case 64:\r\n                timeInterval=50;\r\n                break;\r\n            case 300:\r\n                timeInterval=25;\r\n                break;\r\n            case 1344:\r\n                timeInterval=5;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        mazeSolver.intervalCode=setInterval(()=>{\r\n\r\n            if(mazeSolver.path.length===0){\r\n                clearInterval(mazeSolver.intervalCode);\r\n                return;\r\n            }\r\n            \r\n            const lastPos=parseInt(mazeSolver.path.pop(),10);\r\n            mazeSolver.allSq[lastPos].classList.add('current');\r\n        },timeInterval);\r\n    },\r\n    isDiagonalSneak(currKey,direction){\r\n        var horizontalNbrKey=0,verticalNbrKey=0;\r\n        switch(direction){\r\n            case 'upRight':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'upLeft':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'downRight':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            case 'downLeft':\r\n                horizontalNbrKey=mazeSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=mazeSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (horizontalNbrKey==-1 || verticalNbrKey==-1){\r\n            console.log(\"NEGS\");\r\n        }\r\n\r\n        const hzntlWall=mazeSolver.allSq[horizontalNbrKey].classList.contains('obstacle');\r\n        const verticalWall=mazeSolver.allSq[verticalNbrKey].classList.contains('obstacle');\r\n        return (hzntlWall && verticalWall);\r\n        \r\n    },\r\n    dfs(difficulty){\r\n        mazeSolver.cleanInstVars();\r\n        var timeInterval=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                timeInterval=40;\r\n                break;\r\n            case \"medium\":\r\n                timeInterval=15;\r\n                break;\r\n            case \"hard\":\r\n                timeInterval=1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        //initialize allSq, isVisited, path, mazeType\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n            mazeSolver.isVisited.push(false);\r\n            mazeSolver.prevV.push(-1);\r\n        }\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        mazeSolver.isVisited[entranceKey]=true;\r\n        mazeSolver.path.push(entranceKey);\r\n        const cleanSlateSq=document.getElementsByClassName('cleanSlateSq');\r\n        mazeSolver.mazeType=(cleanSlateSq.length===0)?'maze':'cleanSlate';\r\n\r\n        //actual dfs logic starts here\r\n        const diagonalMoves=[\"right\",\"left\",\"up\",\"down\",\"upRight\",\"upLeft\",\"downRight\",\"downLeft\"];\r\n        const nonDiagonalMoves=[\"right\",\"left\",\"up\",\"down\"];\r\n        const nbrPositions=(mazeSolver.mazeType===\"cleanSlate\")?diagonalMoves:nonDiagonalMoves;\r\n\r\n        mazeSolver.intervalCode=setInterval(()=>{\r\n\r\n            //get last element in path\r\n            const currPos=parseInt(mazeSolver.path[mazeSolver.path.length-1],10);\r\n\r\n            //if last element is exit, commence exit backtrack\r\n            if (mazeSolver.allSq[currPos].classList.contains('exit')){\r\n                clearInterval(mazeSolver.intervalCode);\r\n                mazeSolver.backTrackPath();\r\n                return;\r\n            }\r\n\r\n            //if last element not exit, mark current as explored, look at nbrs\r\n            mazeSolver.allSq[currPos].classList.remove('current');\r\n            mazeSolver.allSq[currPos].classList.add('explored');\r\n            for (var i=0;i<nbrPositions.length;i++){\r\n                const nbrKey=mazeSolver.getNbrKey(currPos,nbrPositions[i]);\r\n                if (nbrKey!==-1 && !mazeSolver.isVisited[nbrKey] && !mazeSolver.allSq[nbrKey].classList.contains('obstacle')){\r\n\r\n                    if (i>3 && mazeSolver.isDiagonalSneak(currPos,nbrPositions[i]))\r\n                        continue;\r\n\r\n                    mazeSolver.isVisited[nbrKey]=true;\r\n                    mazeSolver.path.push(nbrKey);\r\n                    mazeSolver.prevV[nbrKey]=currPos;\r\n                    return;\r\n                }\r\n            }\r\n            mazeSolver.path.pop();\r\n            \r\n        },timeInterval)\r\n    },\r\n    bfs(difficulty){\r\n        mazeSolver.cleanInstVars();\r\n        var timeInterval=0;\r\n        switch(difficulty){\r\n            case \"easy\":\r\n                timeInterval=40;\r\n                break;\r\n            case \"medium\":\r\n                timeInterval=15;\r\n                break;\r\n            case \"hard\":\r\n                timeInterval=100;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        //initialize isVisited, path, and move types\r\n        for (var i=0;i<mazeSolver.allSq.length;i++){\r\n            mazeSolver.isVisited.push(false);\r\n            mazeSolver.prevV.push(-1);\r\n        }\r\n        const cleanSlateSq=document.getElementsByClassName('cleanSlateSq');\r\n        mazeSolver.mazeType=(cleanSlateSq.length===0)?'maze':'cleanSlate';\r\n        const diagonalMoves=[\"right\",\"left\",\"up\",\"down\",\"upRight\",\"upLeft\",\"downRight\",\"downLeft\"];\r\n        const nonDiagonalMoves=[\"right\",\"left\",\"up\",\"down\"];\r\n        const nbrPositions=(mazeSolver.mazeType===\"cleanSlate\")?diagonalMoves:nonDiagonalMoves;\r\n\r\n        //actual bfs logic starts here\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        mazeSolver.isVisited[entranceKey]=true;\r\n        mazeSolver.nextBFSRound.push(entranceKey);\r\n\r\n        mazeSolver.intervalCode=setInterval(()=>{\r\n\r\n            mazeSolver.currBFSRound=mazeSolver.nextBFSRound.concat();\r\n            mazeSolver.nextBFSRound=[];\r\n            while(mazeSolver.currBFSRound.length>0){\r\n           \r\n                const currKey=parseInt(mazeSolver.currBFSRound.shift(),10);\r\n\r\n                if (mazeSolver.allSq[currKey].classList.contains('exit')){\r\n                    clearInterval(mazeSolver.intervalCode);\r\n                    mazeSolver.extractPath();\r\n                    mazeSolver.backTrackPath();\r\n                }\r\n                for (var i=0;i<nbrPositions.length;i++){\r\n                    const nbrKey=mazeSolver.getNbrKey(currKey,nbrPositions[i]);\r\n                    if (nbrKey!==-1 && !mazeSolver.isVisited[nbrKey] && !mazeSolver.allSq[nbrKey].classList.contains('obstacle')){\r\n\r\n                        if (i>3 && mazeSolver.isDiagonalSneak(currKey,nbrPositions[i]))\r\n                            continue;\r\n\r\n                        mazeSolver.isVisited[nbrKey]=true;\r\n                        mazeSolver.prevV[nbrKey]=currKey;\r\n                        mazeSolver.allSq[nbrKey].classList.add('explored');\r\n                        mazeSolver.nextBFSRound.push(nbrKey);\r\n                    }\r\n                }\r\n            }\r\n        },timeInterval)\r\n    }\r\n}\r\n\r\nexport default mazeSolver","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\primsGeneration.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\kruskalsGeneration.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\DFSMaze.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\KruskalsMaze.js",["98"],"import React, { useEffect } from 'react'\r\nimport kruskalsGeneration from './kruskalsGeneration'\r\nimport './Maze.css'\r\n\r\n\r\nconst KruskalsMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        kruskalsGeneration.createMaze(difficulty);\r\n        \r\n    },[])\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default KruskalsMaze","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\PrimsMaze.js",["99"],"import React, { useEffect } from 'react'\r\nimport primsGeneration from './primsGeneration'\r\n\r\nconst PrimsMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        primsGeneration.createMaze(difficulty);\r\n        \r\n    },[])\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default PrimsMaze\r\n\r\n\r\n","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\EllersMaze.js",["100","101"],"import React, { useEffect,useState } from 'react'\r\nimport ellersGeneration from './ellersGeneration'\r\nimport './Maze.css'\r\n\r\n\r\nconst EllersMaze=(props)=>{\r\n    const {difficulty}=props;\r\n\r\n    var mazeId=\"\";\r\n    switch(difficulty){\r\n        case \"easy\":\r\n            mazeId='easyMaze';\r\n            break;\r\n        case 'medium':\r\n            mazeId='mediumMaze';\r\n            break;\r\n        case 'hard':\r\n            mazeId='hardMaze';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        ellersGeneration.createMaze(difficulty);\r\n        \r\n    },[])\r\n    return <React.Fragment>\r\n        <div id={mazeId}>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default EllersMaze","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\ellersGeneration.js",[],["102","103"],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\ChupacabraMaze.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\chupacabraGeneration.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\CleanSlate.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\cleanSlateGeneration.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\priorityQueue.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\AStarSolver.js",["104","105"],"import priorityQueue from \"./priorityQueue\";\r\n\r\nconst AStarSolver={\r\n    allSq:[],\r\n    entranceCoord:[],\r\n    exitCoord:[],\r\n    exitKey:0,\r\n    nextPQ:{},\r\n    intervalCode:0,\r\n    parents:[],\r\n    path:[],\r\n    mazeType:\"\",\r\n\r\n    cleanInstVars(){\r\n        AStarSolver.allSq=[];\r\n        AStarSolver.entranceCoord=[];\r\n        AStarSolver.exitCoord=[];\r\n        AStarSolver.exitKey=0;\r\n        AStarSolver.nextPQ={};\r\n        AStarSolver.intervalCode=0;\r\n        AStarSolver.parents=[];\r\n        AStarSolver.path=[];\r\n        AStarSolver.mazeType=\"\";\r\n    },\r\n    getCoord(id){\r\n        const row=Math.floor(id/56);\r\n        const col=Math.floor(id%56);\r\n        return [row,col];\r\n    },\r\n    getEntranceExitCoord(){\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        AStarSolver.entranceCoord=AStarSolver.getCoord(entranceKey);\r\n        \r\n        const exitKey=document.getElementsByClassName('exit')[0].getAttribute('key');\r\n        AStarSolver.exitCoord=AStarSolver.getCoord(exitKey);\r\n        AStarSolver.exitKey=parseInt(exitKey,10);\r\n\r\n        const emptySlateSq=document.getElementsByClassName('emptySlateSq');\r\n        AStarSolver.mazeType=(emptySlateSq.length===0)?\"maze\":\"cleanSlate\";\r\n    },\r\n    getDistEntrance(id){\r\n        const idCoord=AStarSolver.getCoord(id);\r\n        const di=Math.abs(AStarSolver.entranceCoord[0]-idCoord[0]);\r\n        const dj=Math.abs(AStarSolver.entranceCoord[1]-idCoord[1]);\r\n        const dist=Math.round(Math.sqrt(di*di+dj*dj));\r\n        return dist;\r\n    },\r\n    getDistExit(id){\r\n        const idCoord=AStarSolver.getCoord(id);\r\n        const di=Math.abs(AStarSolver.exitCoord[0]-idCoord[0]);\r\n        const dj=Math.abs(AStarSolver.exitCoord[1]-idCoord[1]);\r\n        const dist=Math.round(Math.sqrt(di*di+dj*dj));\r\n        return dist;\r\n    },\r\n    getFCost(id){\r\n        const distEntrance=AStarSolver.getDistEntrance(id);\r\n        const distExit=AStarSolver.getDistExit(id);\r\n        return distEntrance+distExit;\r\n    },\r\n    getNbrKey(currKey,direction){\r\n        const gridSize=AStarSolver.allSq.length;\r\n        currKey=parseInt(currKey,10);\r\n        var rowSize=0;\r\n        switch(gridSize){\r\n            case 64:\r\n                rowSize=8;\r\n                break;\r\n            case 300:\r\n                rowSize=20;\r\n                break;\r\n            case 1344:\r\n                rowSize=56;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        rowSize=parseInt(rowSize,10);\r\n\r\n        var up=0,down=0,right=0,left=0;\r\n        switch(direction){\r\n            case 'up':\r\n                return (AStarSolver.allSq[currKey].classList.contains('top'))?-1:currKey-rowSize;\r\n            case 'down':\r\n                return (AStarSolver.allSq[currKey].classList.contains('bottom'))?-1:currKey+rowSize;\r\n            case 'left':\r\n                return (AStarSolver.allSq[currKey].classList.contains('left'))?-1:currKey-1;\r\n            case 'right':\r\n                return (AStarSolver.allSq[currKey].classList.contains('right'))?-1:currKey+1;\r\n            case 'upLeft':\r\n                up=AStarSolver.getNbrKey(currKey,'up');\r\n                left=AStarSolver.getNbrKey(currKey,'left');\r\n                return (up===-1 || left===-1)?-1:currKey-rowSize-1;\r\n            case 'upRight':\r\n                up=AStarSolver.getNbrKey(currKey,'up');\r\n                right=AStarSolver.getNbrKey(currKey,'right');\r\n                return (up===-1 || right===-1)?-1:currKey-rowSize+1;\r\n            case 'downLeft':\r\n                down=AStarSolver.getNbrKey(currKey,'down');\r\n                left=AStarSolver.getNbrKey(currKey,'left');\r\n                return (down===-1 || left===-1)?-1:currKey+rowSize-1;\r\n            case 'downRight':\r\n                down=AStarSolver.getNbrKey(currKey,'down');\r\n                right=AStarSolver.getNbrKey(currKey,'right');\r\n                return (down===-1 || right===-1)?-1:currKey+rowSize+1;\r\n            default:\r\n                return -1;\r\n        }\r\n    },\r\n    isDiagonalSneak(currKey,direction){\r\n        var horizontalNbrKey=0,verticalNbrKey=0;\r\n        switch(direction){\r\n            case 'upRight':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'upLeft':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'up');\r\n                break;\r\n            case 'downRight':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'right');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            case 'downLeft':\r\n                horizontalNbrKey=AStarSolver.getNbrKey(currKey,'left');\r\n                verticalNbrKey=AStarSolver.getNbrKey(currKey,'down');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        \r\n        const hzntlWall=AStarSolver.allSq[horizontalNbrKey].classList.contains('obstacle');\r\n        const verticalWall=AStarSolver.allSq[verticalNbrKey].classList.contains('obstacle');\r\n        return (hzntlWall && verticalWall);\r\n        \r\n    },\r\n    extractPath(){\r\n        var exitKey=AStarSolver.exitKey;\r\n        while(AStarSolver.parents[exitKey]!==-1){\r\n            AStarSolver.path.unshift(exitKey);\r\n            exitKey=AStarSolver.parents[exitKey];\r\n        }\r\n        AStarSolver.path.unshift(exitKey);\r\n    },\r\n    backTrackPath(){\r\n\r\n        var timeInterval=0;\r\n        \r\n        AStarSolver.intervalCode=setInterval(()=>{\r\n\r\n            if(AStarSolver.path.length===0){\r\n                clearInterval(AStarSolver.intervalCode);\r\n                return;\r\n            }\r\n            \r\n            const lastPos=parseInt(AStarSolver.path.pop(),10);\r\n            AStarSolver.allSq[lastPos].classList.add('current');\r\n        },5);\r\n    },\r\n    solve(difficulty){\r\n        AStarSolver.cleanInstVars();\r\n\r\n        //initializing my instance vars and containers\r\n        AStarSolver.allSq=document.getElementsByClassName('hardSquare');\r\n\r\n        AStarSolver.getEntranceExitCoord();\r\n        for (var i=0;i<AStarSolver.allSq.length;i++){\r\n            AStarSolver.parents.push(-1);\r\n        }\r\n        AStarSolver.nextPQ=new priorityQueue();\r\n        const diagonalMoves=['up','down','left','right','upLeft','upRight','downRight','downLeft'];\r\n        const nonDiagonalMoves=['up','down','left','right'];\r\n\r\n        //pushing entranceKey into PQ\r\n        const entranceKey=document.getElementsByClassName('entrance')[0].getAttribute('key');\r\n        AStarSolver.nextPQ.push([0,entranceKey]);\r\n\r\n\r\n\r\n        AStarSolver.intervalCode=setInterval(()=>{\r\n            const curr=AStarSolver.nextPQ.top();\r\n            AStarSolver.nextPQ.pop();\r\n\r\n            var currKey=curr[1];\r\n\r\n            //early release to avoid processing nodes that are already in set\r\n            while(AStarSolver.allSq[currKey].classList.contains('set')){\r\n                const curr=AStarSolver.nextPQ.top();\r\n                AStarSolver.nextPQ.pop();\r\n                currKey=curr[1];\r\n            }\r\n\r\n            AStarSolver.allSq[currKey].classList.remove('PQ');\r\n            AStarSolver.allSq[currKey].classList.add('set');\r\n\r\n            var nbrPos=(AStarSolver.mazeType===\"cleanSlate\")?diagonalMoves:nonDiagonalMoves;\r\n            \r\n            for (var i=0;i<nbrPos.length;i++){\r\n                const nbrKey=parseInt(AStarSolver.getNbrKey(currKey,nbrPos[i]),10);\r\n                //skip nbr if its an out of bounds,obstacle or its already in visitedSet\r\n                if (nbrKey>=AStarSolver.allSq.length){\r\n                    console.log(\"ERROR: \"+nbrKey);\r\n                    continue;\r\n                }\r\n                if (nbrKey==-1)\r\n                    continue;\r\n                if (AStarSolver.allSq[nbrKey].classList.contains('obstacle'))\r\n                    continue;\r\n                if (i>3 && AStarSolver.isDiagonalSneak(currKey,nbrPos[i]))\r\n                    continue;\r\n                if (AStarSolver.allSq[nbrKey].classList.contains('set'))\r\n                    continue;\r\n                \r\n                const nbrF=AStarSolver.getFCost(nbrKey);\r\n                AStarSolver.parents[nbrKey]=currKey;\r\n                AStarSolver.allSq[nbrKey].classList.add('PQ');\r\n                AStarSolver.nextPQ.push([nbrF,nbrKey]);\r\n\r\n                if (nbrKey===AStarSolver.exitKey){\r\n                    console.log('HIT');\r\n                    clearInterval(AStarSolver.intervalCode);\r\n                    AStarSolver.extractPath();\r\n                    AStarSolver.backTrackPath();\r\n                    return;\r\n                }\r\n\r\n            }\r\n\r\n        },10)\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default AStarSolver","C:\\Users\\thisi\\Desktop\\github repos\\maze-madness\\src\\appFiles\\Navbar.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":1,"column":24,"nodeType":"112","messageId":"113","endLine":1,"endColumn":33},{"ruleId":"110","severity":1,"message":"114","line":1,"column":8,"nodeType":"112","messageId":"113","endLine":1,"endColumn":18},{"ruleId":"115","severity":1,"message":"116","line":298,"column":29,"nodeType":"117","messageId":"118","endLine":298,"endColumn":31},{"ruleId":"115","severity":1,"message":"116","line":298,"column":51,"nodeType":"117","messageId":"118","endLine":298,"endColumn":53},{"ruleId":"119","severity":1,"message":"120","line":27,"column":7,"nodeType":"121","endLine":27,"endColumn":9,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"120","line":25,"column":7,"nodeType":"121","endLine":25,"endColumn":9,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"124","line":1,"column":27,"nodeType":"112","messageId":"113","endLine":1,"endColumn":35},{"ruleId":"119","severity":1,"message":"120","line":27,"column":7,"nodeType":"121","endLine":27,"endColumn":9,"suggestions":"125"},{"ruleId":"106","replacedBy":"126"},{"ruleId":"108","replacedBy":"127"},{"ruleId":"110","severity":1,"message":"128","line":148,"column":13,"nodeType":"112","messageId":"113","endLine":148,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":206,"column":27,"nodeType":"117","messageId":"118","endLine":206,"endColumn":29},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'mazeSolver' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'difficulty'. Either include it or remove the dependency array.","ArrayExpression",["131"],["132"],"'useState' is defined but never used.",["133"],["129"],["130"],"'timeInterval' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},{"desc":"134","fix":"137"},"Update the dependencies array to be: [difficulty]",{"range":"138","text":"139"},{"range":"140","text":"139"},{"range":"141","text":"139"},[593,595],"[difficulty]",[558,560],[594,596]]